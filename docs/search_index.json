[["index.html", "3D’omics | Micro-scale spatial metagenomics (MSSM) Work in progress Chapter 1 Introduction 1.1 Prepare the R environment 1.2 Define Plotting Settings 1.3 Load Functions", " 3D’omics | Micro-scale spatial metagenomics (MSSM) Work in progress Carlotta Pietroni1 Antton Alberdi2 Amalia Bogri3 2025-07-13 Chapter 1 Introduction This webbook contains all the code used for the analyses of in “Micro-scale spatial metagenomics: revealing high-resolution spatial biogeography of gut microbiomes”. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/3d-omics/MSSM Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # install.packages(&#39;BiocManager&#39;, dependencies = TRUE) # BiocManager::install(c(&quot;phyloseq&quot;, &quot;ggtreeExtra&quot;,&quot;ggtree&quot;,&quot;ANCOMBC&quot;, &quot;ALDEx2&quot;))&#39; if(!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;) # If the package is not installed, installs from CRAN pacman::p_load(tidyverse, rairtable, jsonlite, ape, ggpubr, broom, reshape2, zCompositions, ANCOMBC, ALDEx2, car, DHARMa, sjPlot, ggeffects, microViz, ggh4x, vegan, ggfortify, ggrepel, microbiome, ggforce, patchwork, grid, pheatmap, janitor, spdep, adespatial, adegraphics, # lmPerm ade4, magick, permuco, airtabler2, rmarkdown, purrr, PerformanceAnalytics, microViz) pacman::p_load_gh(&#39;anttonalberdi/hilldiv2&#39;, # If the package is not installed, installs from GitHub &#39;anttonalberdi/distillR&#39;, &#39;wilkelab/cowplot&#39;) select &lt;- dplyr::select recode &lt;- dplyr::recode 1.1.3 Notes: 1.1.3.1 Installation of modules Most of the modules can be downloaded from CRAN with ‘install.packages(’XXX’, dependencies = TRUE)‘. Four modules are from Bioconductor. Install with: ’install.packages(’BiocManager’, dependencies = TRUE) BiocManager::install(c(“phyloseq”, “ggtreeExtra”,“ggtree”,“ANCOMBC”, “ALDEx2”))’ Three modules are github. Install with: ‘install.packages(’remotes’, dependencies = TRUE) remotes::install_github(‘anttonalberdi/hilldiv2’) remotes::install_github(‘anttonalberdi/distillR’)’ remotes::install_github(‘wilkelab/cowplot’)’ 1.1.3.2 Airtable access: Currently the metadata is loaded from the 3D’omics airtable. In order to access it you need your own API key (from Antton). set_airtable_api_key(‘XXXXX’, install = TRUE) 1.2 Define Plotting Settings 1.2.1 Color Schemes phylum_colors &lt;- c(Actinomycetota = &quot;#346254&quot;, Bacillota = &quot;#4a6ab7&quot;, Bacillota_A = &quot;#8c1c47&quot;, Bacteroidota = &quot;#9c8464&quot;, Pseudomonadota = &quot;#c49d4b&quot;, Verrucomicrobiota = &quot;#462410&quot;) order_colors &lt;- c(Actinomycetales = &quot;#79b1a3&quot;, Coriobacteriales = &quot;#498a77&quot;, CAJFEE01 = &quot;#a0c5e8&quot;, Erysipelotrichales = &quot;#7acef4&quot;, Lactobacillales = &quot;#6390fb&quot;, ML615J_28 = &quot;#70c9de&quot;, Paenibacillales = &quot;#70a8dc&quot;, RF39 = &quot;#5c7fba&quot;, Christensenellales = &quot;#f58262&quot;, Clostridiales = &quot;#cf4a82&quot;, Lachnospirales = &quot;#e15f7d&quot;, Monoglobales = &quot;#e18299&quot;, Oscillospirales = &quot;#ba2760&quot;, Peptostreptococcales = &quot;#e35d51&quot;, TANB77 = &quot;#ef3d26&quot;, UBA1381 = &quot;#be5643&quot;, Bacteroidales = &quot;#e3c7a0&quot;, Enterobacterales = &quot;#ffcc62&quot;, Verrucomicrobiales = &quot;#823f1d&quot;) lawsonibacter_colors &lt;- c(`GPB:bin_000217` = &quot;#79b1a3&quot;, `GPB:bin_000137` = &quot;darkgrey&quot;, `GPB:bin_000118` = &quot;#7acef4&quot;, `GPB:bin_000080` = &quot;#6390fb&quot;, `GPB:bin_000077` = &quot;#5c7fba&quot;, `GPB:bin_000072` = &quot;lightgreen&quot;, `GPB:bin_000015` = &quot;#cf4a82&quot;, `GPB:bin_000047` = &quot;#e35d51&quot;, `GPB:bin_000044` = &quot;black&quot;, `GPB:bin_000034` = &quot;#e3c7a0&quot;, `GPB:bin_000063` = &quot;#ffcc62&quot;, `D300470:bin_000020` = &quot;darkseagreen3&quot;) 1.2.2 Plotting Theme custom_ggplot_theme &lt;- theme( strip.text.y.left = element_text(angle = 0), strip.text.y.right = element_text(angle = 0), axis.text = element_text(size = 10), axis.title = element_text(size = 12, face = &quot;bold&quot;), strip.background = element_rect(fill = &quot;#dde3e9&quot;, color = &quot;white&quot;, size = 0.8), # Custom facet strip background strip.text = element_text(size = 11, face = &quot;bold&quot;, color = &quot;black&quot;), # Custom facet text 8 strip.placement = &quot;outside&quot;, # Place strip outside the panel grid panel.spacing = unit(0.1, &quot;lines&quot;), # Adjust space between panels panel.grid.major = element_line(color = &quot;#dde3e9&quot;), # Customize major grid lines panel.grid.minor = element_blank(), # Remove minor grid lines panel.background = element_rect(fill = &quot;white&quot;), # Change panel background color plot.margin = unit(c(1, 1, 1, 1), &quot;cm&quot;) # Adjust plot margins to ensure content fits ) 1.3 Load Functions 1.3.1 parse_fastp_function parse_fastp &lt;- function(multiqc_json) { fastp_raw &lt;- multiqc_json$report_saved_raw_data$multiqc_fastp fastp_tibble &lt;- tibble::tibble( sample_id = names(fastp_raw), values = fastp_raw ) |&gt; dplyr::mutate( sample_id = sample_id |&gt; stringr::str_remove_all(&quot;fastp \\\\| &quot;) |&gt; stringr::str_remove(&quot;_[12].fq.gz&quot;) |&gt; stringr::str_split(&quot;_&quot;) |&gt; purrr::map(1) |&gt; unlist() ) |&gt; tidyr::unnest_wider(values) |&gt; tidyr::unnest_wider(-sample_id, names_sep = &quot;.&quot;) |&gt; tidyr::unnest_wider( c( summary.before_filtering, summary.after_filtering, polyx_trimming.polyx_trimmed_reads, polyx_trimming.polyx_trimmed_bases ), names_sep = &quot;.&quot; ) fastp_tibble } 1.3.2 calculate_alpha_diversity calculate_alpha_diversity &lt;- function(input_data, metadata_name, dataset_name, tree_name) { input_data_matrix &lt;- input_data %&gt;% column_to_rownames(var = &quot;genome&quot;) colsum &lt;- input_data_matrix %&gt;% summarise(across(where(is.numeric), sum)) %&gt;% pivot_longer(cols = everything(), names_to = &quot;microsample&quot;, values_to = &quot;cov_filtering&quot;) %&gt;% mutate(cov_filtering=ifelse(cov_filtering &gt; 0 , &quot;Retained By Filtering&quot;, &quot;Excluded By Filtering&quot;)) # Define diversity metrics and calculate diversity_metrics &lt;- list( richness = hilldiv(input_data_matrix, q = 0), neutral = hilldiv(input_data_matrix, q = 1), phylogenetic = hilldiv(input_data_matrix, q = 1, tree = tree_name) ) # Process metrics into a single data frame alpha_diversity &lt;- lapply(names(diversity_metrics), function(metric) { diversity_metrics[[metric]] %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(var = &quot;microsample&quot;) %&gt;% rename(!!sym(metric) := 2) # rename metric column }) %&gt;% reduce(full_join, by = &quot;microsample&quot;) %&gt;% right_join(metadata_name, by = &quot;microsample&quot;) %&gt;% # Merge with final stats left_join(colsum, by = &quot;microsample&quot;) #output_filename &lt;- paste0(&quot;results/alpha_div_&quot;, dataset_name, &quot;.tsv&quot;) #write_tsv(alpha_diversity, output_filename) return(alpha_diversity) } 1.3.3 Amalia: perform_pca perform_pca &lt;- function(df, zero_method = &quot;GBM&quot;, z_delete = TRUE) { # Store original dimensions original_rows &lt;- nrow(df) original_cols &lt;- ncol(df) # 1. Zero replacement if (any(df == 0)) { # I think cmultRepl already does that print(&quot;Zeros found&quot;) df &lt;- cmultRepl(df, method = zero_method, output = &quot;prop&quot;, z.warning = 0.8, z.delete = z_delete) df &lt;- df * 100 } # Print removed rows and columns removed_rows &lt;- original_rows - nrow(df) removed_cols &lt;- original_cols - ncol(df) cat(&quot;Rows (samples) removed:&quot;, removed_rows, &quot;\\n&quot;) cat(&quot;Columns (taxa) removed:&quot;, removed_cols, &quot;\\n&quot;) #plot_abundance_heatmap(df) # Geometric mean function geometric_mean &lt;- function(x) { # Use log to avoid underflow exp(mean(log(x), na.rm = TRUE)) } # 2. Calculate geometric mean of the parts (taxa) of the data set. taxa_geometric_means &lt;- apply(df, 2, geometric_mean) # 3. Center data df_centered &lt;- sweep(df, 2, taxa_geometric_means, FUN = &quot;/&quot;) df_centered &lt;- as.matrix(df_centered) # Compute the Variation Matrix variation_matrix &lt;- outer( 1:ncol(df_centered), 1:ncol(df_centered), Vectorize(function(i, j) var(log(df_centered[, i] / df_centered[, j]), na.rm = TRUE)) ) # Calculate Total Variance D &lt;- ncol(df_centered) # Number of taxa (columns) totvar &lt;- (1 / (2 * D)) * sum(variation_matrix, na.rm = TRUE) # 4. Scale data power_exponent &lt;- 1 / sqrt(totvar) df_scaled &lt;- df_centered^power_exponent # print(df_scaled) # CLR transform data clr_transform &lt;- function(x) { log(x) - mean(log(x), na.rm = TRUE) } df_clr &lt;- t(apply(df_scaled, 1, clr_transform)) df_clr &lt;- as.data.frame(df_clr) df_clr_dist &lt;- t(apply(df, 1, clr_transform)) df_clr_dist &lt;- as.data.frame(df_clr_dist) # Perform PCA on zero replaced, centered, scaled, and CLR transformed df pca_result &lt;- prcomp(df_clr, center = FALSE, scale. = FALSE) pca_result_dist &lt;- prcomp(df_clr_dist, center = TRUE, scale. = TRUE) return(list( df_clr = df_clr, df_clr_dist = df_clr_dist, pca_result=pca_result, pca_result_dist=pca_result_dist)) } 1.3.4 fit_and_analyze_model fit_and_analyze_model &lt;- function(model = c(&quot;lm&quot;, &quot;glm&quot;), distribution = NULL, response_var, explanatory_var, data) { model &lt;- match.arg(model) # Restrict to &quot;lm&quot; or &quot;glm&quot; # Construct the model formula model_formula &lt;- as.formula(paste(response_var, &quot;~&quot;, explanatory_var)) # Initialize all possible return objects anova_result &lt;- NULL md &lt;- NULL simResids &lt;- NULL if (model == &quot;lm&quot;) { # Continuous floats (any real number) md &lt;- lm(model_formula, data = data) anova_result &lt;- broom::tidy(Anova(md, test.statistic = &quot;F&quot;)) } else if (model == &quot;glm&quot;) { # Counts (integers ≥0): poisson, quasipoisson (accounts overdispersion) # Proportions (0–1 continuous): quasibinomial GLM (accounts overdispersion) but beta regression (not GLM) Preferred over quasibinomial GLM # Continuous floats (any real number): gaussian, Gamma (continuous positive data, skewed to the right) if (is.null(distribution)) { stop(&quot;You must specify a distribution family for glm.&quot;) } md &lt;- glm(model_formula, family = distribution, data = data) if (!grepl(&quot;^quasi&quot;, distribution)) { # Use DHARMa only on supported distributions simResids &lt;- simulateResiduals(md) anova_result &lt;- broom::tidy(Anova(md, test.statistic = &quot;F&quot;)) # ANOVA with F test } else { anova_result &lt;- broom::tidy(Anova(md, test.statistic = &quot;Wald&quot;)) # ANOVA with Chi-squared test } } result &lt;- list( model_fit = md, anova = anova_result ) if (!is.null(simResids)) { result$simResidual &lt;- simResids } return(result) } 1.3.5 pivot_phylo pivot_phylo &lt;- function(phyloseq_obj, glom = TRUE, tax_transform = TRUE, taxon_level, tr_method) { if (glom == TRUE &amp;&amp; !is.null(taxon_level)) { phyloseq_obj &lt;- prune_taxa(taxa_sums(phyloseq_obj) &gt; 0, phyloseq_obj) phyloseq_obj &lt;- tax_glom(phyloseq_obj, taxon_level) } else { . } if (tax_transform == TRUE &amp;&amp; !is.null(tr_method)) { phyloseq_obj &lt;- tax_transform(phyloseq_obj, tr_method) } else { . } pivot_dataframe &lt;- data.frame(otu_table(phyloseq_obj)) %&gt;% rownames_to_column(var = &quot;genome&quot;) %&gt;% pivot_longer(-genome, names_to = &quot;microsample&quot;, values_to = &quot;abundance&quot;) %&gt;% filter(abundance &gt; 0) %&gt;% left_join(data.frame(tax_table(phyloseq_obj)) %&gt;% rownames_to_column(var = &quot;genome&quot;), by = &quot;genome&quot;) %&gt;% left_join(data.frame(sample_data(phyloseq_obj)) %&gt;% rownames_to_column(var = &quot;microsample&quot;), by = &quot;microsample&quot;) # Re-order levels taxa_levels &lt;- c(&quot;domain&quot;, &quot;phylum&quot;, &quot;class&quot;, &quot;order&quot;, &quot;family&quot;, &quot;genus&quot;, &quot;species&quot;) # Iterate over taxonomic levels for (taxa in taxa_levels) { # Check if the column has more than one unique value if (taxa %in% colnames(pivot_dataframe) &amp;&amp; length(unique(pivot_dataframe[[taxa]])) &gt; 1) { # Convert each taxonomic level to a factor with levels ordered by abundance pivot_dataframe &lt;- pivot_dataframe %&gt;% mutate( !!taxa := factor( !!sym(taxa), levels = pivot_dataframe %&gt;% group_by(!!sym(taxa)) %&gt;% summarise(total_abundance = sum(abundance, na.rm = TRUE), .groups = &quot;drop&quot;) %&gt;% arrange(desc(total_abundance)) %&gt;% pull(!!sym(taxa)) ) # Extract ordered levels ) } } return(pivot_dataframe) } 1.3.6 spatial_cryosections spatial_cryosections &lt;- function(cryosection_list, metadata_df, comm_clr) { cryosection_dfs &lt;- list() mantel_results &lt;- list() mantelcor_results &lt;- list() decay_dfs &lt;- list() distance_decay_plots &lt;- list() structure_results &lt;- list() for (cryosection in cryosection_list) { # Filter metadata for this section metadata_data &lt;- metadata_df %&gt;% filter(cryosection == !!cryosection, !is.na(.data$Xcoord), !is.na(.data$Ycoord)) # Filter community data comm_data &lt;- comm_clr %&gt;% data.frame() %&gt;% rownames_to_column(var = &quot;microsample&quot;) %&gt;% filter(microsample %in% metadata_data$microsample) %&gt;% column_to_rownames(var = &quot;microsample&quot;) cryosection_dfs[[cryosection]] &lt;- list( comm_clr = comm_data, metadata = metadata_data ) # Mantel correlogram mantel &lt;- vegan::mantel( dist(comm_data), dist(metadata_data[, c(&quot;Xcoord&quot;, &quot;Ycoord&quot;)]), permutations = 999 ) mantel_results[[cryosection]] &lt;- mantel # Mantel correlogram correlog &lt;- vegan::mantel.correlog( D.eco = dist(comm_data), D.geo = dist(metadata_data[, c(&quot;Xcoord&quot;, &quot;Ycoord&quot;)]), nperm = 999 ) mantelcor_results[[cryosection]] &lt;- correlog # Distance decay toplot &lt;- data.frame( spat_dist = as.numeric(dist(metadata_data[, c(&quot;Xcoord&quot;, &quot;Ycoord&quot;)])), comm_dist = as.numeric(dist(comm_data)) ) decay_dfs[[cryosection]] &lt;- toplot # Plot p &lt;- ggplot(toplot, aes(x = spat_dist, y = comm_dist)) + # geom_point() + geom_smooth() + xlab(&quot;Spatial distance (μm)&quot;) + ylab(&quot;Aitchison \\ndistance&quot;) + custom_ggplot_theme + # ggtitle(paste(&quot;Distance Decay -&quot;, cryosection)) ggtitle(paste(cryosection)) distance_decay_plots[[cryosection]] &lt;- p # Print summary # print(paste(&quot;Summary for&quot;, cryosection)) # print(summary(lm(comm_dist ~ spat_dist, data = toplot))) #### Complex spatial structures # set.seed(111) # spat_SWNs&lt;-listw.candidates(data.frame(metadata_data[,c(&quot;Xcoord&quot;,&quot;Ycoord&quot;)]), # nb = c(&quot;gab&quot;), # weights = c(&quot;fdown&quot;, &quot;fup&quot;), # y_fdown = c(2,5), y_fup = c(0.1,0.5)) # W_sel &lt;- listw.select(comm_data, spat_SWNs, MEM.autocor = &quot;positive&quot;, # p.adjust = T, method=&quot;FWD&quot;) # structure_results[[cryosection]] &lt;- W_sel } return(list( cryosection_dfs = cryosection_dfs, mantel_results = mantel_results, mantelcor_results = mantelcor_results, decay_dfs = decay_dfs, distance_decay_plots = distance_decay_plots, structure_results = structure_results )) } 1.3.7 lawsonibacter_mantel_analysis lawsonibacter_mantel_analysis &lt;- function(data, animal_id, circul_selection) { # 1. Filter and prepare presence-absence matrix if (circul_selection == &quot;Y&quot;) { filtered_data &lt;- data %&gt;% filter( cryosection %in% c(&quot;G121eI103A&quot;, &quot;G103bI301A&quot;), !microsample %in% c(&quot;M300840&quot;, &quot;M301068&quot;, &quot;M301085&quot;, &quot;M301084&quot;), circul == circul_selection, animal == animal_id ) } else { message(&quot;circul_selection is not &#39;Y&#39;; skipping circul filter.&quot;) filtered_data &lt;- data %&gt;% filter( cryosection %in% c(&quot;G121eI103A&quot;, &quot;G103bI301A&quot;), !microsample %in% c(&quot;M300840&quot;, &quot;M301068&quot;, &quot;M301085&quot;, &quot;M301084&quot;), animal == animal_id ) } # Presence Absence # 1. Build presence-absence matrix lawsonibacter_pa &lt;- filtered_data %&gt;% mutate(presence = ifelse(abundance &gt; 0, 1, 0)) %&gt;% select(microsample, genome, presence) %&gt;% pivot_wider(names_from = genome, values_from = presence, values_fill = 0) %&gt;% column_to_rownames(&quot;microsample&quot;) # 2. Community distance comm_dist_pa &lt;- vegan::vegdist(lawsonibacter_pa, method = &quot;jaccard&quot;) # 3. Spatial coordinates coords_pa &lt;- filtered_data %&gt;% distinct(microsample, Xcoord, Ycoord) %&gt;% arrange(microsample) coords_pa &lt;- coords_pa[match(rownames(lawsonibacter_pa), coords_pa$microsample), ] # 4. Spatial distance spatial_dist_pa &lt;- dist(coords_pa[, c(&quot;Xcoord&quot;, &quot;Ycoord&quot;)]) # 5. Mantel test mantel_result_pa &lt;- vegan::mantel(comm_dist_pa, spatial_dist_pa, permutations = 999) # 6. Mantel correlogram mantelcor_result_pa &lt;- vegan::mantel.correlog( D.eco = comm_dist_pa, D.geo = spatial_dist_pa, nperm = 999 ) # CLR # 1. Build count matrix and CLR transformation lawsonibacter_clr &lt;- filtered_data %&gt;% select(microsample, genome, abundance) %&gt;% pivot_wider(names_from = genome, values_from = abundance, values_fill = 0) %&gt;% column_to_rownames(&quot;microsample&quot;) lawsonibacter_clr &lt;- cmultRepl(lawsonibacter_clr, method = &quot;GBM&quot;, output = &quot;prop&quot;, z.warning = 0.95) clr_transform &lt;- function(x) { log(x) - mean(log(x), na.rm = TRUE) } lawsonibacter_clr &lt;- data.frame(t(apply(lawsonibacter_clr, 1, clr_transform))) # 2. Community distance comm_dist_clr &lt;- vegan::vegdist(lawsonibacter_clr, method = &quot;euclidean&quot;) # 2. Spatial coordinates coords_clr &lt;- filtered_data %&gt;% distinct(microsample, Xcoord, Ycoord) %&gt;% arrange(microsample) %&gt;% filter(microsample %in% c(rownames(lawsonibacter_clr))) coords_clr &lt;- coords_clr[match(rownames(lawsonibacter_clr), coords_clr$microsample), ] # 4. Spatial distance spatial_dist_clr &lt;- dist(coords_clr[, c(&quot;Xcoord&quot;, &quot;Ycoord&quot;)]) # 5. Mantel test mantel_result_clr &lt;- vegan::mantel(comm_dist_clr, spatial_dist_clr, permutations = 999) # 6. Mantel correlogram mantelcor_result_clr &lt;- vegan::mantel.correlog( D.eco = comm_dist_clr, D.geo = spatial_dist_clr, nperm = 999 ) distance_clr_df &lt;- data.frame( spat_dist = as.numeric(spatial_dist_clr), comm_dist = as.numeric(comm_dist_clr) ) clr_lm &lt;- aovperm(lmperm(comm_dist ~ spat_dist, data = distance_clr_df, np=10000)) return(list( animal = animal_id, mantel_pa = mantel_result_pa, correlogram_pa = mantelcor_result_pa, mantel_clr = mantel_result_clr, correlogram_clr = mantelcor_result_clr, clr_lm = clr_lm )) } University of Copenhagen, carlotta.pietroni@sund.ku.dk↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ University of Copenhagen, amalia.bogri@sund.ku.dk↩︎ "],["micro-scale-spatial-metagenomics-mssm-main-manuscript.html", "Chapter 2 Micro-scale Spatial Metagenomics (MSSM): Main Manuscript 2.1 Load data 2.2 Microbial Genomic Reference Data 2.3 FISH probes design? 2.4 MSSM Method Development 2.5 MSSM method validation", " Chapter 2 Micro-scale Spatial Metagenomics (MSSM): Main Manuscript 2.1 Load data load(&quot;data/25_07_10_selected_data.Rdata&quot;) # load the data from 1-data_preparation 2.2 Microbial Genomic Reference Data 2.2.1 Macro-scale MAGs Catalogue Summary Statistics cat(&quot;Completeness median = &quot;, round(median(macromag_genomemetadata$completeness), 2), &quot;\\n&quot;) Completeness median = 99.98 cat( &quot;Completeness IQR = &quot;, round(quantile(macromag_genomemetadata$completeness, probs = c(0.25)), 2), &quot;-&quot;, round(quantile(macromag_genomemetadata$completeness, probs = c(0.75)), 2), &quot;\\n&quot; ) Completeness IQR = 94.6 - 100 cat(&quot;Contamination median = &quot;, round(median(macromag_genomemetadata$contamination), 2), &quot;\\n&quot;) Contamination median = 0.23 cat( &quot;Contamination IQR = &quot;, round(quantile(macromag_genomemetadata$contamination, probs = c(0.25)), 2), &quot;-&quot;, round(quantile(macromag_genomemetadata$contamination, probs = c(0.75)), 2) ) Contamination IQR = 0 - 1.71 2.2.2 Micro-scale MAGs Catalogue Summary Statistics cat(&quot;Completeness median = &quot;, round(median(micromag_genomemetadata$completeness), 2), &quot;\\n&quot;) Completeness median = 96.94 cat( &quot;Completeness IQR = &quot;, round(quantile(micromag_genomemetadata$completeness, probs = c(0.25)), 2), &quot;-&quot;, round(quantile(micromag_genomemetadata$completeness, probs = c(0.75)), 2), &quot;\\n&quot; ) Completeness IQR = 91.49 - 99.49 cat(&quot;Contamination median = &quot;, round(median(micromag_genomemetadata$contamination), 2), &quot;\\n&quot;) Contamination median = 0.58 cat( &quot;Contamination IQR = &quot;, round(quantile(micromag_genomemetadata$contamination, probs = c(0.25)), 2), &quot;-&quot;, round(quantile(micromag_genomemetadata$contamination, probs = c(0.75)), 2) ) Contamination IQR = 0.21 - 1.83 2.2.3 Amalia: Macro vs Micro MAGs: Completeness and Abundance (Fig. 2a) 2.2.4 Amalia: Macro MAGs Overview (Fig. 2b) 2.2.5 Amalia: Micro MAGs Overview (Suppl. Fig. 1) 2.2.6 Comparative Analysis of Genome Catalogues (Suppl. Note 1) cat(&quot;Number Genomes in Macro-scale MAGs Catalogue =&quot;, length(macromag_taxonomy$genome), &quot;\\n&quot;) Number Genomes in Macro-scale MAGs Catalogue = 223 cat(&quot;Number Genomes in Micro-scale MAGs Catalogue =&quot;, length(micromag_taxonomy$genome), &quot;\\n&quot;) Number Genomes in Micro-scale MAGs Catalogue = 122 2.2.6.1 Data selection sn1_sample_id &lt;- microquant_metrics_filt_30 %&gt;% # select microquant dataset filter( batch %in% c(&quot;MSEB0011&quot;), type_binomial %in% c(&quot;positive&quot;) ) %&gt;% pull(microsample) sn1_phylo_count &lt;- full_join( microquant_genome_counts_filt_30 %&gt;% select(genome, all_of(sn1_sample_id)) %&gt;% rename_with(~ paste0(.x, &quot;_micro&quot;), .cols = -genome), macroquant_genome_counts_filt_30 %&gt;% select(genome, all_of(sn1_sample_id)) %&gt;% rename_with(~ paste0(.x, &quot;_macro&quot;), .cols = -genome), by = &quot;genome&quot; ) %&gt;% mutate(across( where(is.numeric), ~ replace_na(.x, 0) )) %&gt;% filter(if_any(where(is.numeric), ~ . != 0)) %&gt;% select( genome, where(~ !is.numeric(.x) || sum(.x, na.rm = TRUE) != 0) ) %&gt;% column_to_rownames(&quot;genome&quot;) sn1_phylo_metadata &lt;- bind_rows( microquant_metrics_filt_30 %&gt;% mutate( sample_id = microsample, microsample = paste0(microsample, &quot;_micro&quot;), dataset = &quot;Micro-scale&quot; ), macroquant_metrics_filt_30 %&gt;% mutate( sample_id = microsample, microsample = paste0(microsample, &quot;_macro&quot;), dataset = &quot;Macro-scale&quot; ) ) %&gt;% filter(microsample %in% c(names(sn1_phylo_count))) %&gt;% column_to_rownames(&quot;microsample&quot;) sn1_phylo_taxonomy &lt;- bind_rows(micromag_taxonomy, macromag_taxonomy) %&gt;% filter(genome %in% c(rownames(sn1_phylo_count))) %&gt;% column_to_rownames(&quot;genome&quot;) sn1_physeq &lt;- phyloseq( sn1_phylo_count %&gt;% otu_table(., taxa_are_rows = TRUE), sn1_phylo_metadata %&gt;% sample_data(), sn1_phylo_taxonomy %&gt;% as.matrix() %&gt;% tax_table() ) sn1_physeq_species &lt;- tax_glom(sn1_physeq, taxrank = &quot;species&quot;) if (nrow(data.frame(sn1_physeq_species@tax_table) %&gt;% rownames_to_column(&quot;genome&quot;) %&gt;% count(species) %&gt;% filter(n &gt; 1)) &gt; 0) { cat(&quot;warning: Some species appear more than once in the taxonomy table&quot;) } else { cat(&quot;All species are unique&quot;) } All species are unique sn1_physeq_G121e &lt;- subset_samples(sn1_physeq_species, animal == &quot;G121e&quot;) sn1_physeq_G121e &lt;- prune_taxa(taxa_sums(sn1_physeq_G121e) &gt; 0, sn1_physeq_G121e) 2.2.6.2 Read Counts sn1_read_df &lt;- bind_rows( lapply(list( micro = microquant_read_counts_filt_30 %&gt;% select(genome, all_of(sn1_sample_id)), macro = macroquant_read_counts_filt_30 %&gt;% select(genome, all_of(sn1_sample_id)) ), function(df) { df %&gt;% summarise(across(-1, sum)) %&gt;% pivot_longer(cols = everything(), names_to = &quot;microsample&quot;, values_to = &quot;number_reads&quot;) }), .id = &quot;source&quot; ) %&gt;% pivot_wider(names_from = source, values_from = number_reads) # Run Spearman&#39;s correlation test sn1_cor_result &lt;- cor.test(sn1_read_df$micro, sn1_read_df$macro, method = &quot;spearman&quot;) Warning in cor.test.default(sn1_read_df$micro, sn1_read_df$macro, method = &quot;spearman&quot;): Cannot compute exact p-value with ties # Extract values rho &lt;- sn1_cor_result$estimate pval &lt;- sn1_cor_result$p.value n &lt;- length(sn1_read_df$micro) # Report cat(sprintf(&quot;Spearman&#39;s ρ = %.2f, p = %.3f, n = %d&quot;, rho, pval, n), &quot;\\n&quot;) Spearman&#39;s ρ = 0.99, p = 0.000, n = 144 cat(&quot;Macro-scale genome catalogue mean read counts =&quot;, mean(sn1_read_df$macro) / 1000000, &quot;\\n&quot;) Macro-scale genome catalogue mean read counts = 11.11378 cat(&quot;Micro-scale genome catalogue mean read counts =&quot;, mean(sn1_read_df$micro) / 1000000, &quot;\\n&quot;) Micro-scale genome catalogue mean read counts = 12.16407 sn1_read_count &lt;- sn1_read_df %&gt;% ggplot(aes(x = macro, y = micro)) + geom_point() + geom_abline(slope = 1, intercept = 0, linetype = &quot;dashed&quot;) + stat_cor( method = &quot;spearman&quot;, label.x = Inf, label.y = -Inf, hjust = 1.1, vjust = -1.1, size = 4 ) + # adds the correlation custom_ggplot_theme + labs( x = &quot;Mapped Reads \\nMacro-scale Catalogue&quot;, y = &quot;Mapped Reads \\nMicro-scale Catalogue&quot; ) # sn1_read_count 2.2.6.3 Alpha diversity (Fig. S1.1a) sn1_alpha_df &lt;- sample_data(sn1_physeq_species) %&gt;% data.frame() %&gt;% filter(richness &gt; 0) %&gt;% select(dataset, sample_id, richness, neutral, phylogenetic) %&gt;% rename(`MAGs Catalogue` = dataset, microsample = sample_id) sn1_alpha_df_wd &lt;- sn1_alpha_df %&gt;% pivot_wider( names_from = `MAGs Catalogue`, names_glue = &quot;{`MAGs Catalogue`}_{.value}&quot;, values_from = c(richness, neutral, phylogenetic) ) sn1_alpha_df_lg &lt;- sn1_alpha_df %&gt;% pivot_longer( cols = c(richness, neutral, phylogenetic), names_to = &quot;metric&quot;, values_to = &quot;value&quot; ) %&gt;% mutate(metric = factor(metric, levels = c(&quot;richness&quot;, &quot;neutral&quot;, &quot;phylogenetic&quot;) )) figs1_1a &lt;- sn1_alpha_df_lg %&gt;% filter( !metric %in% c(&quot;phylogenetic&quot;), (metric == &quot;neutral&quot; &amp; value &gt; 1) | (metric == &quot;richness&quot; &amp; value &gt; 0) ) %&gt;% mutate(metric = fct_recode(metric, &quot;Richness&quot; = &quot;richness&quot;, &quot;Neutral&quot; = &quot;neutral&quot; )) %&gt;% ggplot(aes(x = metric, y = value, fill = `MAGs Catalogue`)) + geom_boxplot() + # geom_violin(trim = TRUE, alpha = 0.7, position = position_dodge(0.8), na.rm = TRUE) + # Violin plot geom_jitter( position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8), size = 1.5, alpha = 0.3 ) + theme_minimal() + scale_fill_manual(values = c(&quot;#79b1a3&quot;, &quot;#f58262&quot;)) + custom_ggplot_theme + labs( # title = &quot;a&quot;, x = &quot;Alpha Diversity Metric&quot;, y = &quot;&quot; ) + theme(legend.position = &quot;bottom&quot;) figs1_1a ggsave(filename = &quot;figures/FigS1_1a.pdf&quot;, figs1_1a, width = 12, height = 5) ggsave(filename = &quot;figures/FigS1_1a.png&quot;, figs1_1a, width = 12, height = 5) wilcox.test(sn1_alpha_df_wd$`Micro-scale_richness`, sn1_alpha_df_wd$`Macro-scale_richness`, paired = TRUE, na.action = na.omit) %&gt;% tidy() # 5 nas? # A tibble: 1 × 4 statistic p.value method alternative &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 7486. 1.59e-20 Wilcoxon signed rank test with continuity correction two.sided wilcox.test(sn1_alpha_df_wd$`Micro-scale_neutral`, sn1_alpha_df_wd$`Macro-scale_neutral`, paired = TRUE, na.action = na.omit) %&gt;% tidy() # 5 nas? # A tibble: 1 × 4 statistic p.value method alternative &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 5078 0.882 Wilcoxon signed rank test with continuity correction two.sided 2.2.6.4 Detected Taxa microscale_taxa &lt;- left_join( microquant_genome_counts_filt_30 %&gt;% select(genome, all_of(sn1_sample_id)) %&gt;% filter(rowSums(across(where(is.numeric))) &gt; 0) %&gt;% select(genome) %&gt;% as.data.frame(), micromag_taxonomy, by = &quot;genome&quot; ) macroscale_taxa &lt;- left_join( macroquant_genome_counts_filt_30 %&gt;% select(genome, all_of(sn1_sample_id)) %&gt;% filter(rowSums(across(where(is.numeric))) &gt; 0) %&gt;% select(genome) %&gt;% as.data.frame(), macromag_taxonomy, by = &quot;genome&quot; ) micro_unique_species &lt;- setdiff(microscale_taxa$species, macroscale_taxa$species) macro_unique_species &lt;- setdiff(macroscale_taxa$species, microscale_taxa$species) sn1_unique_species_df &lt;- tibble( species = c(micro_unique_species, macro_unique_species), source = c( rep(&quot;Micro-scale&quot;, length(micro_unique_species)), rep(&quot;Macro-scale&quot;, length(macro_unique_species)) ) ) cat(&quot;Number Unique Species in Micro-scale MAGs Catalogue =&quot;, length(micro_unique_species), &quot;\\n&quot;) Number Unique Species in Micro-scale MAGs Catalogue = 40 cat(&quot;Number Unique Species in Macro-scale MAGs Catalogue =&quot;, length(macro_unique_species), &quot;\\n&quot;) Number Unique Species in Macro-scale MAGs Catalogue = 8 micro_unique_genera &lt;- setdiff(microscale_taxa$genus, macroscale_taxa$genus) macro_unique_genera &lt;- setdiff(macroscale_taxa$genus, microscale_taxa$genus) sn1_unique_genera_df &lt;- tibble( genera = c(micro_unique_genera, macro_unique_genera), source = c( rep(&quot;Micro-scale&quot;, length(micro_unique_genera)), rep(&quot;Macro-scale&quot;, length(macro_unique_genera)) ) ) cat(&quot;Number Unique Genera in Micro-scale MAGs Catalogue =&quot;, length(micro_unique_genera), &quot;\\n&quot;) Number Unique Genera in Micro-scale MAGs Catalogue = 28 cat(&quot;Number Unique Genera in Macro-scale MAGs Catalogue =&quot;, length(macro_unique_genera), &quot;\\n&quot;) Number Unique Genera in Macro-scale MAGs Catalogue = 0 2.2.6.5 Beta diversity (Fig. S1.1b, Fig. S1.1c) sn1_betacount_df &lt;- data.frame(otu_table(sn1_physeq_species)) %&gt;% rownames_to_column(&quot;genome&quot;) %&gt;% melt(id = &quot;genome&quot;) %&gt;% setNames(c(&quot;genome&quot;, &quot;microsample&quot;, &quot;count&quot;)) %&gt;% left_join(data.frame(tax_table(sn1_physeq_species)) %&gt;% rownames_to_column(&quot;genome&quot;), by = &quot;genome&quot;) %&gt;% select(species, microsample, count) %&gt;% filter(count &gt; 0) %&gt;% pivot_wider(names_from = species, values_from = count, values_fill = 0) %&gt;% # change here select(where(~ any(. != 0))) %&gt;% mutate(across(-microsample, ~ . / rowSums(across(where(is.numeric))) * 100)) %&gt;% column_to_rownames(var = &quot;microsample&quot;) sn1_beta_obj &lt;- perform_pca(sn1_betacount_df) [1] &quot;Zeros found&quot; Warning in cmultRepl(df, method = zero_method, output = &quot;prop&quot;, z.warning = 0.8, : Column no. 23 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 28 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 35 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 46 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 54 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 58 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 65 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 66 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 67 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 77 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 78 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 79 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 80 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 81 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 82 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 84 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 85 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 87 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 89 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 90 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 91 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 92 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 93 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 94 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 95 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 99 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 100 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 101 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 102 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 103 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 105 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 107 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 108 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 109 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 110 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 111 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 112 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 113 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 114 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 115 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 116 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 117 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 121 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 122 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 123 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 124 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 125 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Warning in cmultRepl(df, method = zero_method, output = &quot;prop&quot;, z.warning = 0.8, : Row no. 46 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 69 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 72 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 78 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 90 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 104 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 108 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 110 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 114 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 115 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 116 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 120 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 134 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 187 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 210 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 213 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 219 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 231 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 245 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 249 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 251 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 255 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 256 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 257 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 261 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 275 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). No. adjusted imputations: 1410 Rows (samples) removed: 26 Columns (taxa) removed: 47 sn1_beta_metadata &lt;- data.frame(sample_data(sn1_physeq_species)) %&gt;% rownames_to_column(&quot;microsample&quot;) %&gt;% filter(microsample %in% c(rownames(sn1_beta_obj$df_clr))) %&gt;% rename( `MAGs Catalogue` = dataset, Animal = animal ) sn1_scores &lt;- rownames_to_column(as.data.frame(sn1_beta_obj$pca_result$x), var = &quot;microsample&quot;) sn1_scores &lt;- left_join(sn1_scores, sn1_beta_metadata, by = join_by(microsample == microsample)) # Calculate variance explained for each principal component variance_explained &lt;- (sn1_beta_obj$pca_result$sdev^2) / sum(sn1_beta_obj$pca_result$sdev^2) * 100 # Plot the first two principal components figs1_1b &lt;- ggplot() + geom_point( data = sn1_scores, aes(x = PC1, y = PC2, group = microsample, color = `MAGs Catalogue`, shape = Animal), size = 3, alpha = 0.5 ) + scale_color_manual(values = c(&quot;#79b1a3&quot;, &quot;#f58262&quot;)) + # Connect the points by group (sample_id) geom_path( data = sn1_scores, aes(x = PC1, y = PC2, group = sample_id), linewidth = 0.7, alpha = 0.8, color = &quot;lightgrey&quot; ) + labs( # title = &quot;b&quot;, x = paste0(&quot;PC1: &quot;, round(variance_explained[1], 2), &quot;% variance explained&quot;), y = paste0(&quot;PC2: &quot;, round(variance_explained[2], 2), &quot;% variance explained&quot;) ) + scale_x_continuous(limits = c(-max(abs(sn1_scores$PC1)), max(abs(sn1_scores$PC1)))) + # Calculate symmetric limits based on data scale_y_continuous(limits = c(-max(abs(sn1_scores$PC2)), max(abs(sn1_scores$PC2)))) + # Calculate symmetric limits based on data geom_hline(yintercept = 0, color = &quot;darkgrey&quot;) + # Horizontal line at y = 0 geom_vline(xintercept = 0, color = &quot;darkgrey&quot;) + # Vertical line at x = 0 custom_ggplot_theme + theme(legend.position = &quot;bottom&quot;) figs1_1b ggsave(filename = &quot;figures/FigS1_1b.pdf&quot;, figs1_1b, width = 12, height = 9) ggsave(filename = &quot;figures/FigS1_1b.png&quot;, figs1_1b, width = 12, height = 9) sn1_aldex_G121e_counts &lt;- data.frame(otu_table(tax_glom(sn1_physeq_G121e, &quot;genus&quot;))) sn1_aldex_G121e_pseudo_counts &lt;- round(sn1_aldex_G121e_counts * 1e6) sn1_aldex_G121e_conditions &lt;- data.frame(sample_data(tax_glom(sn1_physeq_G121e, &quot;genus&quot;))) %&gt;% pull(dataset) # Perform the ALDEx2 differential abundance test # Use &#39;t&#39; test for two groups; &#39;glm&#39; for multi-class or covariates sn1_aldex_G121e_results &lt;- aldex(sn1_aldex_G121e_pseudo_counts, sn1_aldex_G121e_conditions, test = &quot;t&quot;, # or &quot;wilcox&quot; effect = TRUE, # include effect sizes denom = &quot;all&quot;, # normalization denominator mc.samples = 256, # number of Monte Carlo instances verbose = TRUE ) |------------(25%)----------(50%)----------(75%)----------| head(sn1_aldex_G121e_results) rab.all rab.win.Macro-scale rab.win.Micro-scale diff.btw diff.win effect overlap G103bI301:bin_000001 -13.472364 -12.863553 -14.505698 -1.209946 10.241755 -0.09548721 0.4445111 G103bI301:bin_000015 6.189662 8.010238 4.531178 -2.789686 13.403145 -0.21145825 0.3234000 G103bI301:bin_000033 8.600614 10.273893 6.596631 -3.291566 6.517002 -0.39974681 0.2060000 G103bI301A-M301051:bin_000002 12.527720 13.836103 10.636115 -3.360271 4.825846 -0.60678874 0.1971606 G103bI301A-M301059:bin_000006 11.912137 12.959930 10.585596 -2.349741 4.877167 -0.39355080 0.2797441 G103bI301A-M301089:bin_000005 11.139440 12.192323 9.773810 -2.325081 4.690500 -0.39402968 0.2712000 we.ep we.eBH wi.ep wi.eBH G103bI301:bin_000001 4.463567e-01 0.9804171340 3.643449e-01 4.550791e-01 G103bI301:bin_000015 1.796275e-01 0.2931150913 2.567113e-04 5.290427e-04 G103bI301:bin_000033 5.150923e-03 0.0143261759 3.567751e-09 3.998789e-08 G103bI301A-M301051:bin_000002 1.350151e-05 0.0002570778 7.613926e-10 1.374803e-08 G103bI301A-M301059:bin_000006 7.290847e-03 0.0188124174 3.752238e-06 9.055223e-06 G103bI301A-M301089:bin_000005 1.030236e-02 0.0247156130 3.395996e-06 8.358651e-06 # - we.ep: expected p-value from Welch&#39;s t-test # - wi.ep: expected p-value from Wilcoxon test # - we.eBH: BH-adjusted p-value (q-value) # - effect: effect size (difference in clr means / variability) # Filter sn1_aldex_G121e_sig &lt;- sn1_aldex_G121e_results[sn1_aldex_G121e_results$we.eBH &lt; 0.05, ] sn1_aldex_G121e_effect &lt;- sn1_aldex_G121e_sig[abs(sn1_aldex_G121e_sig$effect) &gt; 0.5, ] sn1_aldex &lt;- sn1_aldex_G121e_effect %&gt;% rownames_to_column(&quot;genome&quot;) %&gt;% left_join(data.frame(tax_table(tax_glom(sn1_physeq_G121e, &quot;genus&quot;))) %&gt;% rownames_to_column(&quot;genome&quot;), by = &quot;genome&quot;) # Create horizontal barplot figs1_1c &lt;- sn1_aldex %&gt;% ggplot(., aes(x = reorder(genus, effect), y = diff.btw, fill = abs(effect) &gt; 1)) + geom_bar(stat = &quot;identity&quot;, show.legend = FALSE) + coord_flip() + labs( x = &quot;Genus&quot;, y = &quot;Median difference in CLR values between groups&quot; ) + scale_fill_manual(values = c(&quot;TRUE&quot; = &quot;#e35d51&quot;, &quot;FALSE&quot; = &quot;darkgrey&quot;)) + theme_minimal(base_size = 14) figs1_1c 2.2.6.6 Fig. S1 figs1 &lt;- cowplot::plot_grid(figs1_1a, figs1_1b, figs1_1c, ncol = 1, labels = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), rel_heights = c(1, 1.3, 1), label_size = 16 ) figs1 ggsave(&quot;figures/FigS1.png&quot;, figs1, width = 10, height = 13, dpi = 300) 2.3 FISH probes design? 2.4 MSSM Method Development 2.4.1 Tissue lysis and sequencing library preparation (Suppl. Note 3) 2.4.1.1 Impact of Lysis Conditions on Microbial Taxonomic Profiling (Suppl. Note 3.2) 2.4.1.1.1 Amalia: Mock Community (Fig. S3.2.1) 2.4.1.1.2 Microsamples (Fig. S3.2.2) 2.4.1.1.2.1 Data selection sn3_2_df &lt;- macroquant_metrics_filt_30 %&gt;% filter( batch %in% c(&quot;MSEB0006&quot;, &quot;MSEB0010&quot;), # Caeucum (MSEB0006) and Colon (MSEB0010) section %in% c(&quot;Caecum right&quot;, &quot;Colon&quot;), cycles %in% c(13, 14, 15), type_binomial %in% c(&quot;positive&quot;), richness &gt; 0 ) %&gt;% mutate( collection_attempts = as.factor(collection_attempts), buffer = as.factor(buffer) ) sn3_2_df %&gt;% group_by(section, buffer) %&gt;% summarise(n_samples = n()) # A tibble: 4 × 3 # Groups: section [2] section buffer n_samples &lt;chr&gt; &lt;fct&gt; &lt;int&gt; 1 Caecum right L06 18 2 Caecum right L07 17 3 Colon L06 17 4 Colon L07 18 sn3_2_df %&gt;% group_by(section, buffer, collection_attempts) %&gt;% summarise(n_samples = n(), .groups = &quot;keep&quot;) %&gt;% pivot_wider(names_from = collection_attempts, values_from = n_samples) # A tibble: 4 × 6 # Groups: section, buffer [4] section buffer `1` `2` `3` `4` &lt;chr&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; 1 Caecum right L06 9 5 1 3 2 Caecum right L07 12 1 1 3 3 Colon L06 11 3 3 NA 4 Colon L07 9 3 6 NA 2.4.1.1.2.2 Visual Comparison of Sequencing Performance (Fig. S3.2.2) ordered_metrics &lt;- c( &quot;total_after_filtering.total_reads&quot;, &quot;mapmag_prokreads_pct&quot;, &quot;percent_duplication.rate&quot;, &quot;richness&quot;, &quot;neutral&quot;, &quot;phylogenetic&quot; # , # &quot;read_fraction_singlem&quot; ) figs3_2_2 &lt;- sn3_2_df %&gt;% pivot_longer( cols = -c(names(mssm_sample_metadata), &quot;cov_filtering&quot;), names_to = &quot;metric&quot;, values_to = &quot;value&quot; ) %&gt;% filter(metric %in% ordered_metrics) %&gt;% mutate( metric = factor(metric, levels = ordered_metrics), metric = fct_recode(metric, &quot;a. Sequencing Yield \\nPost-Quality Filtering&quot; = &quot;total_after_filtering.total_reads&quot;, &quot;b. Reads Mapping \\nMAG Catalogue (%)&quot; = &quot;mapmag_prokreads_pct&quot;, &quot;c. Reads \\nDuplication Rate (%)&quot; = &quot;percent_duplication.rate&quot;, &quot;d. Richness&quot; = &quot;richness&quot;, &quot;e. Neutral&quot; = &quot;neutral&quot;, &quot;f. Phylogenetic&quot; = &quot;phylogenetic&quot; ), section = recode(section, &quot;Caecum right&quot; = &quot;Caecum&quot;, &quot;Colon&quot; = &quot;Colon&quot; ) ) %&gt;% ggplot(aes(x = section, y = value, fill = buffer)) + geom_boxplot() + facet_wrap(~metric, scales = &quot;free_y&quot;, ncol = 3) + labs( fill = &quot;Lysis&quot;, y = &quot;&quot;, x = &quot;Intestinal section&quot; ) + # geom_violin(trim = TRUE, alpha = 0.7, position = position_dodge(0.8), na.rm = TRUE) + # Violin plot geom_jitter( position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8), size = 1.5, alpha = 0.3 ) + scale_fill_manual(values = c(&quot;#79b1a3&quot;, &quot;#f58262&quot;, &quot;black&quot;)) + custom_ggplot_theme + theme(legend.position = &quot;bottom&quot;) figs3_2_2 ggsave(filename = &quot;figures/FigS3_2_2.pdf&quot;, figs3_2_2, width = 8, height = 7) ggsave(filename = &quot;figures/FigS3_2_2.png&quot;, figs3_2_2, width = 8, height = 7) 2.4.1.1.2.3 Statistical Comparison of Sequencing Performance Note: The fit_and_analyze_model() function needs to be loaded. 2.4.1.1.2.4 a. Reads Retained Post Quality Filtering # Counts (integers ≥0): poisson, quasipoisson (accounts overdispersion) sn3_2_a_ca &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;quasipoisson&quot;, # DHARMa significant deviation response_var = &quot;total_after_filtering.total_reads&quot;, explanatory_var = &quot;collection_attempts + buffer&quot;, data = sn3_2_df %&gt;% filter(section %in% c(&quot;Caecum right&quot;)) ) sn3_2_a_ca$anova # A tibble: 2 × 4 term df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 3 3.13 0.371 2 buffer 1 6.71 0.00960 # md &lt;- glm(total_after_filtering.total_reads~collection_attempts + buffer, family = &quot;quasipoisson&quot;, data = sn3_2_df #%&gt;% filter(section %in% c(&quot;Caecum right&quot;))) # broom::tidy(Anova(md, test.statistic = &quot;Wald&quot;)) # ANOVA with F test # Counts (integers ≥0): poisson, quasipoisson (accounts overdispersion) sn3_2_a_co &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;quasipoisson&quot;, # DHARMa significant deviation response_var = &quot;total_after_filtering.total_reads&quot;, explanatory_var = &quot;collection_attempts + buffer&quot;, data = sn3_2_df %&gt;% filter(section %in% c(&quot;Colon&quot;)) ) sn3_2_a_co$anova # A tibble: 2 × 4 term df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 2 3.47 0.176 2 buffer 1 21.7 0.00000327 2.4.1.1.2.5 b. Reads Mapping MAG Catalogue (%) # Proportions (0–1 continuous): quasibinomial GLM (accounts overdispersion) sn3_2_b_ca &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;quasibinomial&quot;, # DHARMa significant deviation response_var = &quot;mapmag_prokreads_pct&quot;, explanatory_var = &quot;collection_attempts + buffer&quot;, data = sn3_2_df %&gt;% filter(section %in% c(&quot;Caecum right&quot;)) ) sn3_2_b_ca$anova # A tibble: 2 × 4 term df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 3 1.14 0.767 2 buffer 1 4.84 0.0279 # Proportions (0–1 continuous): quasibinomial GLM (accounts overdispersion) sn3_2_b_co &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;quasibinomial&quot;, # DHARMa significant deviation response_var = &quot;mapmag_prokreads_pct&quot;, explanatory_var = &quot;collection_attempts + buffer&quot;, data = sn3_2_df %&gt;% filter(section %in% c(&quot;Colon&quot;)) ) sn3_2_b_co$anova # A tibble: 2 × 4 term df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 2 3.69 0.158 2 buffer 1 3.88 0.0488 2.4.1.1.2.6 c. Reads Duplication Rate (%) # Proportions (0–1 continuous): quasibinomial GLM (accounts overdispersion) sn3_2_c_ca &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;quasibinomial&quot;, # DHARMa significant deviation response_var = &quot;percent_duplication.rate&quot;, explanatory_var = &quot;collection_attempts + buffer&quot;, data = sn3_2_df %&gt;% filter(section %in% c(&quot;Caecum right&quot;)) ) sn3_2_c_ca$anova # A tibble: 2 × 4 term df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 3 0.226 0.973 2 buffer 1 0.426 0.514 # Proportions (0–1 continuous): quasibinomial GLM (accounts overdispersion) sn3_2_c_co &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;quasibinomial&quot;, # DHARMa significant deviation response_var = &quot;percent_duplication.rate&quot;, explanatory_var = &quot;collection_attempts + buffer&quot;, data = sn3_2_df %&gt;% filter(section %in% c(&quot;Colon&quot;)) ) sn3_2_c_co$anova # A tibble: 2 × 4 term df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 2 4.19 0.123 2 buffer 1 8.79 0.00303 2.4.1.1.2.7 d. Richness # Counts (integers ≥0): poisson, quasipoisson (accounts overdispersion) sn3_2_d_ca &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;quasipoisson&quot;, # DHARMa significant deviation response_var = &quot;richness&quot;, explanatory_var = &quot;collection_attempts + buffer&quot;, data = sn3_2_df %&gt;% filter(section %in% c(&quot;Caecum right&quot;)) ) sn3_2_d_ca$anova # A tibble: 2 × 4 term df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 3 2.10 0.552 2 buffer 1 2.75 0.0974 # md &lt;- glm(total_after_filtering.total_reads~collection_attempts + buffer, family = &quot;quasipoisson&quot;, data = sn3_2_df #%&gt;% filter(section %in% c(&quot;Caecum right&quot;))) # broom::tidy(Anova(md, test.statistic = &quot;Wald&quot;)) # ANOVA with F test # Counts (integers ≥0): poisson, quasipoisson (accounts overdispersion) sn3_2_d_co &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;quasipoisson&quot;, # DHARMa significant deviation response_var = &quot;richness&quot;, explanatory_var = &quot;collection_attempts + buffer&quot;, data = sn3_2_df %&gt;% filter(section %in% c(&quot;Colon&quot;)) ) sn3_2_d_co$anova # A tibble: 2 × 4 term df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 2 3.42 0.181 2 buffer 1 12.8 0.000338 2.4.1.1.2.8 e. Neutral” = “neutral”, # # Continuous floats (any real number): lm or gaussian, Gamma (continuous positive data, skewed to the right) sn3_2_e_ca &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;gaussian&quot;, # DHARMa significant deviation KS response_var = &quot;neutral&quot;, explanatory_var = &quot;collection_attempts + buffer&quot;, data = sn3_2_df %&gt;% filter(section %in% c(&quot;Caecum right&quot;)) ) # plot(sn3_2_e_ca$simResidual) sn3_2_e_ca$anova # A tibble: 3 × 5 term sumsq df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 129. 3 0.912 0.447 2 buffer 41.0 1 0.869 0.359 3 Residuals 1415. 30 NA NA # Counts (integers ≥0): poisson, quasipoisson (accounts overdispersion) sn3_2_e_co &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;gaussian&quot;, response_var = &quot;neutral&quot;, explanatory_var = &quot;collection_attempts + buffer&quot;, data = sn3_2_df %&gt;% filter(section %in% c(&quot;Colon&quot;)) ) # plot(sn3_2_e_co$simResidual) sn3_2_e_co$anova # A tibble: 3 × 5 term sumsq df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 88.2 2 2.02 0.150 2 buffer 96.3 1 4.41 0.0440 3 Residuals 677. 31 NA NA 2.4.1.1.2.9 f. Phylogenetic” = “phylogenetic” # # Continuous floats (any real number): lm or gaussian, Gamma (continuous positive data, skewed to the right) sn3_2_f_ca &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;gaussian&quot;, # DHARMa significant deviation KS response_var = &quot;phylogenetic&quot;, explanatory_var = &quot;collection_attempts + buffer&quot;, data = sn3_2_df %&gt;% filter(section %in% c(&quot;Caecum right&quot;)) ) plot(sn3_2_f_ca$simResidual) sn3_2_f_ca$anova # A tibble: 3 × 5 term sumsq df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 0.328 3 0.730 0.542 2 buffer 0.534 1 3.56 0.0688 3 Residuals 4.49 30 NA NA # Counts (integers ≥0): poisson, quasipoisson (accounts overdispersion) sn3_2_f_co &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;gaussian&quot;, response_var = &quot;phylogenetic&quot;, explanatory_var = &quot;collection_attempts + buffer&quot;, data = sn3_2_df %&gt;% filter(section %in% c(&quot;Colon&quot;)) ) plot(sn3_2_f_co$simResidual) sn3_2_f_co$anova # A tibble: 3 × 5 term sumsq df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 0.0581 2 0.967 0.391 2 buffer 0.117 1 3.88 0.0579 3 Residuals 0.932 31 NA NA 2.4.1.1.2.10 Detected Taxa sn3_2_taxa &lt;- left_join( macroquant_genome_counts_filt_30 %&gt;% select(genome, all_of(sn3_2_df$microsample)) %&gt;% filter(rowSums(across(where(is.numeric))) &gt; 0) %&gt;% melt(id = &quot;genome&quot;, variable.name = &quot;microsample&quot;), macromag_taxonomy, by = &quot;genome&quot; ) %&gt;% left_join(macroquant_metrics_filt_30, by = &quot;microsample&quot;) %&gt;% filter( value &gt; 0, section %in% c(&quot;Colon&quot;) ) sn3_2_unique_L06 &lt;- setdiff( sn3_2_taxa %&gt;% filter(buffer %in% c(&quot;L06&quot;)) %&gt;% distinct(genus), sn3_2_taxa %&gt;% filter(buffer %in% c(&quot;L07&quot;)) %&gt;% distinct(genus) ) sn3_2_unique_L07 &lt;- setdiff( sn3_2_taxa %&gt;% filter(buffer %in% c(&quot;L07&quot;)) %&gt;% distinct(genus), sn3_2_taxa %&gt;% filter(buffer %in% c(&quot;L06&quot;)) %&gt;% distinct(genus) ) sn3_2_unique_genus_df &lt;- tibble( genus = c(sn3_2_unique_L06$genus, sn3_2_unique_L07$genus), source = c( rep(&quot;L06&quot;, length(sn3_2_unique_L06$genus)), rep(&quot;L07&quot;, length(sn3_2_unique_L07$genus)) ) ) cat(&quot;Number Unique Genus in L06 =&quot;, length(sn3_2_unique_L06$genus), &quot;\\n&quot;) Number Unique Genus in L06 = 1 cat(&quot;Number Unique Genus in L07 =&quot;, length(sn3_2_unique_L07$genus), &quot;\\n&quot;) Number Unique Genus in L07 = 10 (length(sn3_2_unique_L07$genus) / sn3_2_taxa %&gt;% distinct(genus) %&gt;% count()) * 100 n 1 13.69863 2.4.1.2 Performance Evaluation Across Intestinal Sections (Suppl. Note 3.3) 2.4.1.2.0.1 Data selection sn3_3_df &lt;- macroquant_metrics_filt_30 %&gt;% filter( batch %in% c(&quot;MSEB0006&quot;, &quot;MSEB0010&quot;), section %in% c(&quot;Caecum right&quot;, &quot;Ileum&quot;, &quot;Colon&quot;), # cycles %in% c(13, 14, 15), type_binomial %in% c(&quot;positive&quot;), richness &gt; 0 ) %&gt;% mutate( collection_attempts = as.factor(collection_attempts), buffer = as.factor(buffer), cycles = as.factor(cycles) ) sn3_3_df %&gt;% filter(!cycles %in% c(&quot;19&quot;)) %&gt;% group_by(section, buffer) %&gt;% summarise(n_samples = n()) # A tibble: 6 × 3 # Groups: section [3] section buffer n_samples &lt;chr&gt; &lt;fct&gt; &lt;int&gt; 1 Caecum right L06 18 2 Caecum right L07 17 3 Colon L06 17 4 Colon L07 18 5 Ileum L06 16 6 Ileum L07 16 sn3_3_df %&gt;% filter(!cycles %in% c(&quot;19&quot;)) %&gt;% group_by(section, buffer, collection_attempts) %&gt;% summarise(n_samples = n(), .groups = &quot;keep&quot;) %&gt;% pivot_wider(names_from = collection_attempts, values_from = n_samples) # A tibble: 6 × 6 # Groups: section, buffer [6] section buffer `1` `2` `3` `4` &lt;chr&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; 1 Caecum right L06 9 5 1 3 2 Caecum right L07 12 1 1 3 3 Colon L06 11 3 3 NA 4 Colon L07 9 3 6 NA 5 Ileum L06 8 6 NA 2 6 Ileum L07 6 7 2 1 2.4.1.2.0.2 Visual Comparison of Sequencing Performance (Fig. S3.3.1) ordered_metrics &lt;- c( &quot;total_after_filtering.total_reads&quot;, &quot;lowquality_reads_pct&quot;, # &quot;adapter_contamination_pct&quot;, &quot;host_pct&quot;, &quot;mapmag_prokreads_pct&quot;, &quot;read_fraction_singlem&quot;, &quot;richness&quot; ) figs3_3_1 &lt;- sn3_3_df %&gt;% filter(!cycles %in% c(&quot;19&quot;)) %&gt;% pivot_longer( cols = -c(names(mssm_sample_metadata), &quot;cov_filtering&quot;), names_to = &quot;metric&quot;, values_to = &quot;value&quot; ) %&gt;% filter(metric %in% ordered_metrics) %&gt;% mutate( metric = factor(metric, levels = ordered_metrics), metric = fct_recode(metric, &quot;a. Sequencing Yield \\nPost-Quality Filtering&quot; = &quot;total_after_filtering.total_reads&quot;, &quot;b. Low Quality \\nReads (%)&quot; = &quot;lowquality_reads_pct&quot;, &quot;c. Reads Mapping \\nEukaryotic Host (%)&quot; = &quot;host_pct&quot;, &quot;d. Reads Mapping \\nMAG Catalogue (%)&quot; = &quot;mapmag_prokreads_pct&quot;, &quot;e. Microbial Fraction \\nBased On SCG (%)&quot; = &quot;read_fraction_singlem&quot;, &quot;f. Richness&quot; = &quot;richness&quot; ), section = recode(section, &quot;Caecum right&quot; = &quot;Caecum&quot;, &quot;Colon&quot; = &quot;Colon&quot; ) ) %&gt;% ggplot(aes(x = section, y = value, fill = section)) + geom_boxplot() + facet_wrap(~metric, scales = &quot;free_y&quot;, ncol = 3) + labs( fill = &quot;&quot;, y = &quot;&quot;, x = &quot;Intestinal section&quot; ) + # geom_violin(trim = TRUE, alpha = 0.7, position = position_dodge(0.8), na.rm = TRUE) + # Violin plot geom_jitter( position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8), size = 1.5, alpha = 0.3 ) + scale_fill_manual(values = c(&quot;#79b1a3&quot;, &quot;#f58262&quot;, &quot;#e3c7a0&quot;)) + custom_ggplot_theme + theme(legend.position = &quot;none&quot;) figs3_3_1 ggsave(filename = &quot;figures/FigS3_3_1.pdf&quot;, figs3_3_1, width = 8, height = 7) ggsave(filename = &quot;figures/FigS3_3_1.png&quot;, figs3_3_1, width = 8, height = 7) 2.4.1.2.0.3 Statistical Comparison of Sequencing Performance 2.4.1.2.0.4 a. Reads Retained Post Quality Filtering # Counts (integers ≥0): poisson, quasipoisson (accounts overdispersion) sn3_3_a &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;quasipoisson&quot;, # DHARMa significant deviation response_var = &quot;total_after_filtering.total_reads&quot;, explanatory_var = &quot;collection_attempts + section&quot;, data = sn3_3_df %&gt;% filter(!cycles %in% c(&quot;19&quot;)) ) # plot(a_sectioncomp$simResidual) sn3_3_a$anova # A tibble: 2 × 4 term df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 3 4.84 1.84e- 1 2 section 2 109. 2.45e-24 2.4.1.2.0.5 b. Low Quality Reads (%) # Proportions (0–1 continuous): quasibinomial GLM (accounts overdispersion) sn3_3_b &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;quasibinomial&quot;, response_var = &quot;lowquality_reads_pct&quot;, explanatory_var = &quot;collection_attempts + section&quot;, data = sn3_3_df %&gt;% filter(!cycles %in% c(&quot;19&quot;)) ) sn3_3_b$anova # A tibble: 2 × 4 term df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 3 12.2 0.00659 2 section 2 36.5 0.0000000118 sn3_3_b$model_fit %&gt;% plot_model(., type = &quot;pred&quot;, terms = c(&quot;collection_attempts&quot;, &quot;section&quot;)) Warning: Some of the focal terms are of type `character`. This may lead to unexpected results. It is recommended to convert these variables to factors before fitting the model. The following variables are of type character: `section` sn3_3_b$model_fit %&gt;% plot_model(., type = &quot;pred&quot;, terms = c(&quot;section&quot;)) Warning: Some of the focal terms are of type `character`. This may lead to unexpected results. It is recommended to convert these variables to factors before fitting the model. The following variables are of type character: `section` sn3_3_b$model_fit %&gt;% ggpredict(., terms = c(&quot;section&quot;)) Warning: Some of the focal terms are of type `character`. This may lead to unexpected results. It is recommended to convert these variables to factors before fitting the model. The following variables are of type character: `section` # Predicted probabilities of lowquality_reads_pct section | Predicted | 95% CI ------------------------------------- Caecum right | 0.07 | 0.04, 0.15 Ileum | 0.35 | 0.25, 0.48 Colon | 0.51 | 0.40, 0.62 Adjusted for: * collection_attempts = 1 2.4.1.2.0.6 c. Reads Mapping Eukaryotic Host (%) # Proportions (0–1 continuous): quasibinomial GLM (accounts overdispersion) sn3_3_c &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;quasibinomial&quot;, response_var = &quot;host_pct&quot;, explanatory_var = &quot;collection_attempts + section&quot;, data = sn3_3_df %&gt;% filter(!cycles %in% c(&quot;19&quot;)) ) sn3_3_c$anova # A tibble: 2 × 4 term df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 3 15.4 0.00153 2 section 2 21.6 0.0000199 sn3_3_c$model_fit %&gt;% plot_model(., type = &quot;pred&quot;, terms = c(&quot;collection_attempts&quot;, &quot;section&quot;)) Warning: Some of the focal terms are of type `character`. This may lead to unexpected results. It is recommended to convert these variables to factors before fitting the model. The following variables are of type character: `section` sn3_3_c$model_fit %&gt;% plot_model(., type = &quot;pred&quot;, terms = c(&quot;section&quot;)) Warning: Some of the focal terms are of type `character`. This may lead to unexpected results. It is recommended to convert these variables to factors before fitting the model. The following variables are of type character: `section` sn3_3_c$model_fit %&gt;% ggpredict(., terms = c(&quot;section&quot;)) Warning: Some of the focal terms are of type `character`. This may lead to unexpected results. It is recommended to convert these variables to factors before fitting the model. The following variables are of type character: `section` # Predicted probabilities of host_pct section | Predicted | 95% CI ------------------------------------- Caecum right | 0.00 | 0.00, 0.05 Ileum | 0.15 | 0.09, 0.23 Colon | 0.00 | 0.00, 0.02 Adjusted for: * collection_attempts = 1 2.4.1.2.0.7 d. Reads Mapping MAG Catalogue (%) # Proportions (0–1 continuous): quasibinomial GLM (accounts overdispersion) sn3_3_d &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;quasibinomial&quot;, response_var = &quot;mapmag_prokreads_pct&quot;, explanatory_var = &quot;collection_attempts + section&quot;, data = sn3_3_df %&gt;% filter(!cycles %in% c(&quot;19&quot;)) ) sn3_3_d$anova # A tibble: 2 × 4 term df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 3 3.82 2.82e- 1 2 section 2 100. 1.93e-22 sn3_3_d$model_fit %&gt;% plot_model(., type = &quot;pred&quot;, terms = c(&quot;collection_attempts&quot;, &quot;section&quot;)) Warning: Some of the focal terms are of type `character`. This may lead to unexpected results. It is recommended to convert these variables to factors before fitting the model. The following variables are of type character: `section` sn3_3_d$model_fit %&gt;% plot_model(., type = &quot;pred&quot;, terms = c(&quot;section&quot;)) Warning: Some of the focal terms are of type `character`. This may lead to unexpected results. It is recommended to convert these variables to factors before fitting the model. The following variables are of type character: `section` sn3_3_d$model_fit %&gt;% ggpredict(., terms = c(&quot;section&quot;)) Warning: Some of the focal terms are of type `character`. This may lead to unexpected results. It is recommended to convert these variables to factors before fitting the model. The following variables are of type character: `section` # Predicted probabilities of mapmag_prokreads_pct section | Predicted | 95% CI ------------------------------------- Caecum right | 0.84 | 0.81, 0.87 Ileum | 0.62 | 0.56, 0.67 Colon | 0.84 | 0.80, 0.87 Adjusted for: * collection_attempts = 1 2.4.1.2.0.8 e. Microbial Fraction Based On Single-Copy Gene Abundance (%) chart.Correlation(sn3_3_df %&gt;% filter(section %in% c(&quot;Ileum&quot;)) %&gt;% select( &quot;read_fraction_singlem&quot;, &quot;mapmag_prokreads_pct&quot; ), method = &quot;spearman&quot;) Warning in cor.test.default(as.numeric(x), as.numeric(y), method = method): Cannot compute exact p-value with ties # correlation # Proportions (0–1 continuous): quasibinomial GLM (accounts overdispersion) sn3_3_e &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;quasibinomial&quot;, response_var = &quot;read_fraction_singlem&quot;, explanatory_var = &quot;collection_attempts + section&quot;, data = sn3_3_df %&gt;% filter(!cycles %in% c(&quot;19&quot;)) ) sn3_3_e$anova # A tibble: 2 × 4 term df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 3 2.78 0.426 2 section 2 3.65 0.161 sn3_3_e$model_fit %&gt;% plot_model(., type = &quot;pred&quot;, terms = c(&quot;collection_attempts&quot;, &quot;section&quot;)) Warning: Some of the focal terms are of type `character`. This may lead to unexpected results. It is recommended to convert these variables to factors before fitting the model. The following variables are of type character: `section` sn3_3_e$model_fit %&gt;% plot_model(., type = &quot;pred&quot;, terms = c(&quot;section&quot;)) Warning: Some of the focal terms are of type `character`. This may lead to unexpected results. It is recommended to convert these variables to factors before fitting the model. The following variables are of type character: `section` sn3_3_e$model_fit %&gt;% ggpredict(., terms = c(&quot;section&quot;)) Warning: Some of the focal terms are of type `character`. This may lead to unexpected results. It is recommended to convert these variables to factors before fitting the model. The following variables are of type character: `section` # Predicted probabilities of read_fraction_singlem section | Predicted | 95% CI ------------------------------------- Caecum right | 0.75 | 0.69, 0.80 Ileum | 0.68 | 0.61, 0.74 Colon | 0.72 | 0.66, 0.78 Adjusted for: * collection_attempts = 1 2.4.1.2.0.9 Colon: 19 Versus 15 Cycles ordered_metrics &lt;- c( &quot;total_before_filtering.total_reads&quot;, &quot;total_after_filtering.total_reads&quot;, &quot;lowquality_reads_pct&quot;, &quot;percent_duplication.rate&quot; ) sn_3_3_15vs19 &lt;- sn3_3_df %&gt;% filter(section %in% c(&quot;Colon&quot;)) %&gt;% pivot_longer( cols = -c(names(mssm_sample_metadata), &quot;cov_filtering&quot;), names_to = &quot;metric&quot;, values_to = &quot;value&quot; ) %&gt;% filter(metric %in% ordered_metrics) %&gt;% mutate( metric = factor(metric, levels = ordered_metrics), metric = fct_recode(metric, &quot;a. Sequencing yield \\n(Number Reads)&quot; = &quot;total_before_filtering.total_reads&quot;, &quot;b. Reads Retained \\nPost Quality Filtering&quot; = &quot;total_after_filtering.total_reads&quot;, &quot;c. Low Quality Reads (%)&quot; = &quot;lowquality_reads_pct&quot;, &quot;d. Reads \\nDuplication Rate (%)&quot; = &quot;percent_duplication.rate&quot; ) ) %&gt;% ggplot(aes(x = cycles, y = value, fill = buffer)) + geom_boxplot() + facet_wrap(~metric, scales = &quot;free_y&quot;, ncol = 2) + labs( fill = &quot;Lysis Treatment&quot;, y = &quot;&quot;, x = &quot;Intestinal section&quot; ) + # geom_violin(trim = TRUE, alpha = 0.7, position = position_dodge(0.8), na.rm = TRUE) + # Violin plot geom_jitter( position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8), size = 1.5, alpha = 0.3 ) + scale_fill_manual(values = c(&quot;#79b1a3&quot;, &quot;#f58262&quot;)) + custom_ggplot_theme + theme(legend.position = &quot;bottom&quot;) sn_3_3_15vs19 # Counts (integers ≥0): poisson, quasipoisson (accounts overdispersion) readsbf_cyclecomp &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;quasipoisson&quot;, # DHARMa significant deviation response_var = &quot;total_before_filtering.total_reads&quot;, explanatory_var = &quot;collection_attempts + cycles&quot;, data = sn3_3_df %&gt;% filter(section %in% c(&quot;Colon&quot;)) ) # plot(reads_cyclecomp$simResidual) readsbf_cyclecomp$anova # A tibble: 2 × 4 term df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 2 0.298 8.61e- 1 2 cycles 1 91.8 9.51e-22 readsbf_cyclecomp$model_fit %&gt;% ggpredict(., terms = c(&quot;cycles&quot;)) # Predicted counts of total_before_filtering.total_reads cycles | Predicted | 95% CI ----------------------------------------------- 15 | 20601289.15 | 18470098.34, 22978389.55 19 | 37405618.19 | 34008351.23, 41142255.41 Adjusted for: * collection_attempts = 1 # Counts (integers ≥0): poisson, quasipoisson (accounts overdispersion) readshq_cyclecomp &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;quasipoisson&quot;, # DHARMa significant deviation response_var = &quot;total_after_filtering.total_reads&quot;, explanatory_var = &quot;collection_attempts + cycles&quot;, data = sn3_3_df %&gt;% filter(section %in% c(&quot;Colon&quot;)) ) # plot(reads_cyclecomp$simResidual) readshq_cyclecomp$anova # A tibble: 2 × 4 term df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 2 8.38 0.0151 2 cycles 1 4.81 0.0284 readshq_cyclecomp$model_fit %&gt;% ggpredict(., terms = c(&quot;cycles&quot;)) # Predicted counts of total_after_filtering.total_reads cycles | Predicted | 95% CI --------------------------------------------- 15 | 9189837.26 | 7186626.29, 11751426.25 19 | 6542893.05 | 4873355.51, 8784388.79 Adjusted for: * collection_attempts = 1 # Proportions (0–1 continuous): quasibinomial GLM (accounts overdispersion) quality_cyclecomp &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;quasibinomial&quot;, response_var = &quot;lowquality_reads_pct&quot;, explanatory_var = &quot;collection_attempts + cycles&quot;, data = sn3_3_df %&gt;% filter(section %in% c(&quot;Colon&quot;)) ) quality_cyclecomp$anova # A tibble: 2 × 4 term df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 2 6.10 0.0474 2 cycles 1 28.3 0.000000106 quality_cyclecomp$model_fit %&gt;% ggpredict(., terms = c(&quot;cycles&quot;)) # Predicted probabilities of lowquality_reads_pct cycles | Predicted | 95% CI ------------------------------- 15 | 0.51 | 0.41, 0.61 19 | 0.83 | 0.74, 0.89 Adjusted for: * collection_attempts = 1 # Proportions (0–1 continuous): quasibinomial GLM (accounts overdispersion) duplication_cyclecomp &lt;- fit_and_analyze_model( model = &quot;glm&quot;, distribution = &quot;quasibinomial&quot;, # DHARMa significant deviation response_var = &quot;percent_duplication.rate&quot;, explanatory_var = &quot;collection_attempts + cycles&quot;, data = sn3_3_df %&gt;% filter(section %in% c(&quot;Colon&quot;)) ) duplication_cyclecomp$anova # A tibble: 2 × 4 term df statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 collection_attempts 2 7.33 2.56e- 2 2 cycles 1 39.1 4.04e-10 2.4.1.2.0.10 Community Composition of Caecum &amp; Colon (Fig. S3.3.2) sn3_3_physeq &lt;- subset_samples( physeq_all, section %in% c(&quot;Caecum right&quot;, &quot;Colon&quot;) &amp; !cycles %in% c(19) &amp; animal %in% c(&quot;G121e&quot;) &amp; type_binomial == &quot;positive&quot; ) sn3_3_physeq &lt;- prune_taxa(taxa_sums(sn3_3_physeq) &gt; 0, sn3_3_physeq) #sn3_3_physeq &lt;- filter_taxa(sn3_3_physeq, function(x) sum(x &gt; 0) &gt; (0.05 * length(x)), TRUE) sn3_3_aldex_G121e_counts &lt;- data.frame(otu_table(sn3_3_physeq)) sn3_3_aldex_G121e_pseudo_counts &lt;- round(sn3_3_aldex_G121e_counts * 1e6) sn3_3_aldex_G121e_conditions &lt;- data.frame(sample_data(sn3_3_physeq)) %&gt;% pull(section) # Perform the ALDEx2 differential abundance test # Use &#39;t&#39; test for two groups; &#39;glm&#39; for multi-class or covariates sn3_3_aldex_G121e_results &lt;- aldex(sn3_3_aldex_G121e_pseudo_counts, sn3_3_aldex_G121e_conditions, test = &quot;t&quot;, # or &quot;wilcox&quot; effect = TRUE, # include effect sizes denom = &quot;all&quot;, # normalization denominator mc.samples = 256, # number of Monte Carlo instances verbose = TRUE ) |------------(25%)----------(50%)----------(75%)----------| head(sn3_3_aldex_G121e_results) rab.all rab.win.Caecum right rab.win.Colon diff.btw diff.win effect overlap we.ep D300430:bin_000010 8.481719 8.264671 9.726241 0.9668813 9.468293 0.09530578 0.4353129 7.471155e-01 D300435:bin_000001 2.527531 5.125257 -7.144863 -4.7998229 14.560250 -0.35890118 0.3544000 6.529983e-06 D300442:bin_000015 9.373554 9.181300 10.144984 0.4978281 8.171973 0.04924282 0.4679064 2.127295e-01 D300443:bin_000003 9.010784 8.834593 9.957658 0.9525323 8.583837 0.09124237 0.4386000 8.859133e-01 D300444:bin_000010 8.537119 8.329659 9.716912 1.2335887 9.152274 0.11794244 0.4137173 8.807607e-01 D300452:bin_000016 11.099393 10.592259 13.208975 2.1581269 6.285258 0.28557291 0.3403319 2.255854e-03 we.eBH wi.ep wi.eBH D300430:bin_000010 1.000000e+00 6.581530e-02 1.099610e-01 D300435:bin_000001 5.139235e-05 2.725066e-05 2.406951e-04 D300442:bin_000015 6.861961e-01 3.144349e-01 4.793880e-01 D300443:bin_000003 1.000000e+00 4.541951e-02 7.871415e-02 D300444:bin_000010 9.996533e-01 1.975979e-02 3.646924e-02 D300452:bin_000016 8.741359e-03 4.283352e-06 2.211626e-05 # - we.ep: expected p-value from Welch&#39;s t-test # - wi.ep: expected p-value from Wilcoxon test # - we.eBH: BH-adjusted p-value (q-value) # - effect: effect size (difference in clr means / variability) # Filter sn3_3_aldex_G121e_sig &lt;- sn3_3_aldex_G121e_results[sn3_3_aldex_G121e_results$we.eBH &lt; 0.05, ] sn3_3_aldex_G121e_effect &lt;- sn3_3_aldex_G121e_sig[abs(sn3_3_aldex_G121e_sig$effect) &gt; 0.5, ] sn3_3_aldex &lt;- sn3_3_aldex_G121e_effect %&gt;% rownames_to_column(&quot;genome&quot;) %&gt;% left_join(data.frame(tax_table(sn3_3_physeq)) %&gt;% rownames_to_column(&quot;genome&quot;), by = &quot;genome&quot;) # Create horizontal barplot sn3_3_aldex %&gt;% ggplot(., aes(x = reorder(genome, effect), y = diff.btw, fill = abs(effect) &gt; 1)) + geom_bar(stat = &quot;identity&quot;, show.legend = FALSE) + coord_flip() + labs( x = &quot;Genus&quot;, y = &quot;Median difference in CLR values between groups&quot; ) + scale_fill_manual(values = c(&quot;TRUE&quot; = &quot;#e35d51&quot;, &quot;FALSE&quot; = &quot;darkgrey&quot;)) + theme_minimal(base_size = 14) Note: The pivot_phylo() function needs to be loaded. sn3_3_physeq_lg &lt;- pivot_phylo( phyloseq_obj = subset_samples( physeq_all, batch %in% c(&quot;MSEB0006&quot;, &quot;MSEB0010&quot;) &amp; section %in% c(&quot;Caecum right&quot;, &quot;Colon&quot;) &amp; !cycles %in% c(19) &amp; type_binomial == &quot;positive&quot; ), glom = TRUE, tax_transform = TRUE, taxon_level = &quot;order&quot;, tr_method = &quot;compositional&quot; ) Warning: otu_table of counts is NOT available! Available otu_table contains 706 values that are not non-negative integers figs3_3_2 &lt;- sn3_3_physeq_lg %&gt;% mutate(section = ifelse(section == &quot;Caecum right&quot;, &quot;Caecum&quot;, section)) %&gt;% ggplot( aes(x = microsample, y = abundance, fill = order) ) + geom_bar(stat = &quot;identity&quot;, colour = &quot;white&quot;, linewidth = 0.1) + scale_fill_manual(values = order_colors, drop = FALSE) + labs( x = &quot;Microsamples&quot;, y = &quot;Relative abundance&quot;, fill = &quot;Order&quot; ) + facet_wrap(~section, scales = &quot;free&quot;, ncol = 1) + guides(fill = guide_legend(ncol = 4)) + custom_ggplot_theme + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) + theme(legend.position = &quot;bottom&quot;) figs3_3_2 ggsave(filename = &quot;figures/FigS3_3_2.pdf&quot;, figs3_3_2, width = 8, height = 7) ggsave(filename = &quot;figures/FigS3_3_2.png&quot;, figs3_3_2, width = 8, height = 7) 2.4.1.2.0.11 Confocal microscopy of DAPI-stained microsections sn3_3_dapi_df &lt;- dapi_df %&gt;% group_by(Animal, Sequence, Age, Section) %&gt;% summarise( n = n(), Distance_from_one_side_mn = mean(Distance_from_one_side, na.rm = TRUE), Distance_from_one_side_sd = ifelse(n &gt; 1, sd(Distance_from_one_side), NA_real_), mean = mean(Bacterial_count), median = median(Bacterial_count), sd_na = ifelse(n &gt; 1, sd(Bacterial_count), NA_real_), # If only 1 obs, return NA sd = ifelse(n() &gt; 1, sd(Bacterial_count, na.rm = TRUE), 0), # Avoid NA SD sem = ifelse(n &gt; 1, sd / sqrt(n), 0), # Set SEM to 0 if only 1 observation q1 = quantile(Bacterial_count, 0.25), # First quartile q3 = quantile(Bacterial_count, 0.75), # Third quartile .groups = &quot;drop&quot; ) dapi_df %&gt;% group_by(Age, Section) %&gt;% summarise( n = n(), mean = mean(Bacterial_count), median = median(Bacterial_count), sd_na = ifelse(n &gt; 1, sd(Bacterial_count), NA_real_), # If only 1 obs, return NA sd = ifelse(n() &gt; 1, sd(Bacterial_count, na.rm = TRUE), 0), # Avoid NA SD q1 = quantile(Bacterial_count, 0.25), # First quartile q3 = quantile(Bacterial_count, 0.75), # Third quartile .groups = &quot;drop&quot; ) # A tibble: 5 × 9 Age Section n mean median sd_na sd q1 q3 &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 14-day-old Animal Caecum 91 1415. 1383 766. 766. 806. 1914. 2 14-day-old Animal Colon 53 30.3 26 22.9 22.9 12 47 3 35-day-old Animal Caecum 140 844. 648 642. 642. 402. 1112. 4 35-day-old Animal Colon 145 592. 535 367. 367. 293 889 5 35-day-old Animal Ileum 133 27.6 0 67.9 67.9 0 10 2.4.1.2.0.11.1 Visual Comparison (Fig. S3.3.3a) figs3_3_3a &lt;- ggplot(sn3_3_dapi_df, aes(x = Distance_from_one_side_mn, y = median, color = Section)) + geom_line(linewidth = 1) + # Mean line geom_ribbon(aes(ymin = q1, ymax = q3, fill = Section), alpha = 0.2 ) + # SEM shading labs( title = &quot;a&quot;, x = &quot;Distance from Villi (μm)&quot;, y = &quot;Bacterial Counts (Median)&quot; ) + facet_wrap(~Age, nrow = 2, scale = &quot;free_x&quot;) + scale_fill_manual(values = c(&quot;#79b1a3&quot;, &quot;#f58262&quot;, &quot;#e3c7a0&quot;), drop = FALSE) + scale_color_manual(values = c(&quot;#79b1a3&quot;, &quot;#f58262&quot;, &quot;#e3c7a0&quot;), drop = FALSE) + custom_ggplot_theme + theme(legend.position = &quot;bottom&quot;) figs3_3_3a ggsave(filename = &quot;figures/FigS3_3_3a.pdf&quot;, figs3_3_3a, width = 8, height = 7) Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;Distance from Villi (μm)&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;ce&gt; Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;Distance from Villi (μm)&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;bc&gt; Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;Distance from Villi (μm)&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;ce&gt; Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;Distance from Villi (μm)&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;bc&gt; Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;Distance from Villi (μm)&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;ce&gt; Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;Distance from Villi (μm)&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;bc&gt; ggsave(filename = &quot;figures/FigS3_3_3a.png&quot;, figs3_3_3a, width = 8, height = 7) 2.4.2 Design considerations: Controls (Suppl. Note 3.4) 2.4.2.0.0.1 Visual Comparison of Sequencing Performance (Fig. S3.4.1) ordered_metrics &lt;- c( &quot;total_before_filtering.total_reads&quot;, &quot;lowquality_reads_pct&quot;, &quot;adapter_contamination_pct&quot;, &quot;human_pct&quot;, &quot;raw_total_sequences_mag&quot;, &quot;mapmag_prokreads_pct&quot; ) figs3_4_1 &lt;- macroquant_metrics_filt_30 %&gt;% filter(!section %in% c(&quot;Ileum&quot;)) %&gt;% mutate(batch = gsub(&quot;MSEB00&quot;, &quot;B&quot;, batch)) %&gt;% pivot_longer( cols = -c(names(mssm_sample_metadata), &quot;cov_filtering&quot;), names_to = &quot;metric&quot;, values_to = &quot;value&quot; ) %&gt;% filter(metric %in% ordered_metrics) %&gt;% mutate( metric = factor(metric, levels = ordered_metrics), metric = fct_recode(metric, &quot;a. Sequencing Yield Pre-quality Filtering&quot; = &quot;total_before_filtering.total_reads&quot;, &quot;b. Low Quality Reads (%)&quot; = &quot;lowquality_reads_pct&quot;, &quot;c. Adapter Contamination (% bases)&quot; = &quot;adapter_contamination_pct&quot;, &quot;d. Reads Mapping Human (%)&quot; = &quot;human_pct&quot;, &quot;e. Read Counts for Bacterial Quantification &quot; = &quot;raw_total_sequences_mag&quot;, &quot;f. Reads Mapping MAG Catalogue (%)&quot; = &quot;mapmag_prokreads_pct&quot; ), type_binomial = recode(type_binomial, &quot;positive&quot; = &quot;Microsample&quot;, &quot;negative&quot; = &quot;Negative&quot; ) ) %&gt;% ggplot(aes(x = batch, y = value, fill = type_binomial)) + geom_boxplot() + facet_wrap(~metric, scales = &quot;free_y&quot;, ncol = 1) + labs( fill = &quot;&quot;, y = &quot;&quot;, x = &quot;Batch&quot; ) + # geom_violin(trim = TRUE, alpha = 0.7, position = position_dodge(0.8), na.rm = TRUE) + # Violin plot geom_jitter( position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8), size = 1, alpha = 0.3 ) + scale_fill_manual(values = c(&quot;#f58262&quot;, &quot;#79b1a3&quot;)) + custom_ggplot_theme + theme(legend.position = &quot;bottom&quot;) figs3_4_1 ggsave(filename = &quot;figures/FigS3_4_1.pdf&quot;, figs3_4_1, width = 8, height = 11) ggsave(filename = &quot;figures/FigS3_4_1.png&quot;, figs3_4_1, width = 8, height = 11) 2.4.2.1 Amalia: Centered Log-Ratio (CLR) Transformation And Principal Component Analysis (PCA) 2.4.2.1.0.1 FigS3_4_2 2.4.2.1.0.2 FigS3_4_3 2.4.2.1.0.3 Visual Comparison of Coverage Cutoff Filtering (Fig. S3.4.4) figs3_4_4 &lt;- macroquant_metrics_filt_30 %&gt;% mutate( batch = gsub(&quot;MSEB00&quot;, &quot;B&quot;, batch), type_binomial = recode(type_binomial, &quot;positive&quot; = &quot;Positive&quot;, &quot;negative&quot; = &quot;Negative&quot; ) ) %&gt;% # group_by(type_binomial, cov_filtering) %&gt;% group_by(batch, type_binomial, cov_filtering) %&gt;% summarise(n_samples = n()) %&gt;% ggplot(aes(fill = cov_filtering, x = batch, y = n_samples)) + geom_bar(position = &quot;fill&quot;, stat = &quot;identity&quot;) + # Stacked 100% bar geom_text(aes(label = n_samples), position = position_fill(vjust = 0.5), color = &quot;black&quot;, size = 6 ) + facet_wrap(~type_binomial) + scale_fill_manual(values = c(&quot;#f58262&quot;, &quot;#79b1a3&quot;)) + labs( fill = &quot;&quot;, y = &quot;&quot;, x = &quot;Batch&quot; ) + custom_ggplot_theme + theme(legend.position = &quot;bottom&quot;) figs3_4_4 ggsave(filename = &quot;figures/FigS3_4_4.pdf&quot;, figs3_4_4, width = 8, height = 6) ggsave(filename = &quot;figures/FigS3_4_4.png&quot;, figs3_4_4, width = 8, height = 6) sn3_4_physeq_lg &lt;- pivot_phylo( phyloseq_obj = physeq_all, glom = TRUE, tax_transform = TRUE, taxon_level = &quot;genus&quot;, tr_method = &quot;compositional&quot; ) Warning: otu_table of counts is NOT available! Available otu_table contains 19360 values that are not non-negative integers sn3_4_physeq_lg %&gt;% group_by(type_binomial) %&gt;% summarise(n_unique_microsamples = n_distinct(microsample)) # A tibble: 2 × 2 type_binomial n_unique_microsamples &lt;chr&gt; &lt;int&gt; 1 negative 19 2 positive 501 # negative 19 # positive 501 sn3_4_physeq_lg %&gt;% group_by(genus, type_binomial) %&gt;% summarise( n_samples = n(), mean_ra = mean(abundance) ) %&gt;% filter(genus %in% c(sn3_4_physeq_lg %&gt;% filter(type_binomial %in% c(&quot;negative&quot;)) %&gt;% pull(genus))) # A tibble: 48 × 4 # Groups: genus [24] genus type_binomial n_samples mean_ra &lt;fct&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; 1 Lactobacillus negative 6 0.289 2 Lactobacillus positive 479 0.144 3 Streptococcus negative 16 0.595 4 Streptococcus positive 465 0.119 5 Eisenbergiella negative 7 0.173 6 Eisenbergiella positive 456 0.123 7 Mediterraneibacter negative 7 0.152 8 Mediterraneibacter positive 458 0.104 9 Blautia negative 7 0.215 10 Blautia positive 459 0.0780 # ℹ 38 more rows figs3_4_5 &lt;- sn3_4_physeq_lg %&gt;% filter(type_binomial %in% c(&quot;negative&quot;)) %&gt;% ggplot( aes(x = microsample, y = abundance, fill = genus) ) + geom_bar(stat = &quot;identity&quot;, colour = &quot;white&quot;, linewidth = 0.1) + # scale_fill_manual(values = order_colors, drop = FALSE) + labs( x = &quot;Negative reactions&quot;, y = &quot;Relative abundance&quot;, fill = &quot;Genus&quot; ) + #facet_wrap(~batch, scale = &quot;free&quot;) + guides(fill = guide_legend(ncol = 4)) + custom_ggplot_theme + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) + theme(legend.position = &quot;bottom&quot;) figs3_4_5 ggsave(filename = &quot;figures/FigS3_4_5.pdf&quot;, figs3_4_5, width = 8, height = 7) ggsave(filename = &quot;figures/FigS3_4_5.png&quot;, figs3_4_5, width = 8, height = 7) 2.4.3 Amalia: Design considerations: Microsample Sizes 2.4.3.1 Amalia: MSSM spatial resolution evaluation (Fig. 3) 2.4.4 Resource optimisation and throughput (Suppl. Note 3.5) sn3_5_df &lt;- macroquant_metrics_filt_30 %&gt;% filter( batch %in% c(&quot;MSEB0009&quot;, &quot;MSEB0014&quot;, &quot;MSEB0015&quot;), type_binomial %in% c(&quot;positive&quot;), size %in% c(&quot;5000&quot;), !between(as.numeric(sub(&quot;M&quot;, &quot;&quot;, microsample)), 300651, 300665) ) %&gt;% mutate( protocol = ifelse(protocol %in% c(&quot;ULV2_Full&quot;), &quot;100%&quot;, &quot;50%&quot;), comparison = ifelse(batch %in% c(&quot;MSEB0009&quot;), &quot;Cost&quot;, &quot;Throughput&quot;), lib_method = ifelse(batch %in% c(&quot;MSEB0015&quot;), &quot;Fluent (1 plate set-up)&quot;, &quot;Manual&quot;), comparison_grid = ifelse(comparison == &quot;Cost&quot;, protocol, lib_method) ) %&gt;% mutate( comparison = as.factor(comparison), comparison_grid = as.factor(comparison_grid) ) # %&gt;% count(comparison, batch) sn3_5_df_t &lt;- sn3_5_df %&gt;% group_by(comparison_grid) %&gt;% # summarise(mean=mean(total_after_filtering.total_reads)) summarise( total_reads = sum(total_before_filtering.total_reads), low_quality = sum(total_before_filtering.total_reads - total_after_filtering.total_reads), mapping_host = sum(reads_mapped_chicken), mapping_human = sum(reads_mapped_human), mapping_pig = sum(reads_mapped_pig), mapping_bacteria = sum(reads_mapped_mag), unmapped_bacteria = sum(reads_unmapped_mag) ) %&gt;% mutate(other = total_reads - (low_quality + mapping_host + mapping_human + mapping_pig + mapping_bacteria + unmapped_bacteria)) %&gt;% mutate(across(-c(comparison_grid, total_reads), ~ round((. / total_reads) * 100, 1), .names = &quot;{.col}_pct&quot; )) %&gt;% select(comparison_grid, ends_with(&quot;_pct&quot;)) %&gt;% t() %&gt;% as.data.frame() colnames(sn3_5_df_t) &lt;- sn3_5_df_t[1, ] sn3_5_df_t &lt;- sn3_5_df_t[-1, ] # remove the first row sn3_5_df_t 100% 50% Fluent (1 plate set-up) Manual low_quality_pct 21.3 4.1 2.6 3.5 mapping_host_pct 0.2 0.0 0.1 0.1 mapping_human_pct 0.0 0.1 2.3 1.4 mapping_pig_pct 0 0 0 0 mapping_bacteria_pct 65.1 79.5 77.7 78.4 unmapped_bacteria_pct 13.3 16.3 17.3 16.5 other_pct 0 0 0 0 sn3_5_df_t &lt;- sn3_5_df %&gt;% mutate(other = total_before_filtering.total_reads - ((total_before_filtering.total_reads - total_after_filtering.total_reads) + reads_mapped_chicken + reads_mapped_human + reads_mapped_pig + reads_mapped_mag + reads_unmapped_mag)) %&gt;% select(microsample, comparison_grid, total_before_filtering.total_reads, total_low_quality_reads, reads_mapped_chicken, reads_mapped_human, reads_mapped_pig, reads_mapped_mag, reads_unmapped_mag, other) %&gt;% mutate(across(-c(microsample, comparison_grid, total_before_filtering.total_reads), ~ round((. / total_before_filtering.total_reads) * 100, 1), .names = &quot;{.col}_pct&quot; )) %&gt;% select(microsample, comparison_grid, ends_with(&quot;_pct&quot;)) %&gt;% group_by(comparison_grid) %&gt;% summarise( low_quality_md = median(total_low_quality_reads_pct), mapping_host_md = median(reads_mapped_chicken_pct), mapping_human_md = median(reads_mapped_human_pct), mapping_pig_md = median(reads_mapped_pig_pct), mapping_bacteria_md = median(reads_mapped_mag_pct), unmapped_bacteria_md = median(reads_unmapped_mag_pct), other_md = median(other_pct) ) %&gt;% select(comparison_grid, ends_with(&quot;_md&quot;)) %&gt;% t() %&gt;% as.data.frame() colnames(sn3_5_df_t) &lt;- sn3_5_df_t[1, ] sn3_5_df_t &lt;- sn3_5_df_t[-1, ] # remove the first row sn3_5_df_t 100% 50% Fluent (1 plate set-up) Manual low_quality_md 1.50 1.60 1.20 1.65 mapping_host_md 0 0 0 0 mapping_human_md 0.00 0.00 1.35 1.20 mapping_pig_md 0 0 0 0 mapping_bacteria_md 72.40 80.45 78.85 78.65 unmapped_bacteria_md 15.2 16.2 17.0 16.6 other_md 0 0 0 0 ordered_metrics &lt;- c( # &quot;total_before_filtering.total_reads&quot;, &quot;total_low_quality_reads&quot;, &quot;reads_mapped_chicken&quot;, &quot;reads_mapped_human&quot;, &quot;reads_mapped_pig&quot;, &quot;reads_mapped_mag&quot;, &quot;reads_unmapped_mag&quot;, &quot;reads_other&quot; ) figs3_5_1a &lt;- sn3_5_df %&gt;% mutate(other = total_before_filtering.total_reads - ((total_before_filtering.total_reads - total_after_filtering.total_reads) + reads_mapped_chicken + reads_mapped_human + reads_mapped_pig + reads_mapped_mag + reads_unmapped_mag)) %&gt;% pivot_longer( cols = -c(names(mssm_sample_metadata), comparison, lib_method, comparison_grid, cov_filtering), names_to = &quot;metric&quot;, values_to = &quot;value&quot; ) %&gt;% filter(metric %in% ordered_metrics) %&gt;% mutate(microsample = as.factor(microsample)) %&gt;% ggplot(aes(x = microsample, y = value, fill = metric)) + geom_bar(position = &quot;fill&quot;, stat = &quot;identity&quot;) + scale_fill_manual(values = c( &quot;#346254&quot;, &quot;#4a6ab7&quot;, &quot;#8c1c47&quot;, &quot;#9c8464&quot;, &quot;#c49d4b&quot;, &quot;#462410&quot;, &quot;lightblue&quot; )) + labs(x = &quot;Microsample&quot;, y = &quot;&quot;, fill = &quot;Read type&quot;) + facet_nested(. ~ comparison + comparison_grid, scales = &quot;free&quot;, space = &quot;free&quot;, switch = &quot;y&quot;) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + custom_ggplot_theme + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) + theme(legend.position = &quot;bottom&quot;) + guides(fill = guide_legend(title = &quot;Proportion \\nSequencing \\nReads&quot;)) figs3_5_1a ggsave(filename = &quot;figures/FigS3_5_1a.pdf&quot;, figs3_5_1a, width = 8, height = 6) ggsave(filename = &quot;figures/FigS3_5_1a.png&quot;, figs3_5_1a, width = 8, height = 6) # Prepare data: extract plate and filter sn3_5_dreamprep_df_f &lt;- sn3_5_dreamprep_df %&gt;% mutate(plate = str_extract(sample, &quot;^Plate \\\\d+&quot;)) %&gt;% filter( !Range %in% c(&quot;35 bp to 100 bp&quot;), !concentration %in% c(&quot;0.01&quot;), type %in% c(&quot;Positive&quot;) ) %&gt;% # remove rows with that level mutate( Range = droplevels(Range), plate = case_when( grepl(&quot;Plate 1&quot;, plate, ignore.case = TRUE) ~ &quot;Single-Plate&quot;, grepl(&quot;Plate 2&quot;, plate, ignore.case = TRUE) ~ &quot;Dual-Plate A&quot;, grepl(&quot;Plate 3&quot;, plate, ignore.case = TRUE) ~ &quot;Dual-Plate B&quot;, TRUE ~ NA_character_ ), plate = factor(plate, levels = c(&quot;Single-Plate&quot;, &quot;Dual-Plate A&quot;, &quot;Dual-Plate B&quot;)), concentration = paste0(&quot;DNA Input &quot;, concentration, &quot; ng/μL&quot;), Range = case_when( grepl(&quot;100 bp to 200 bp&quot;, Range, ignore.case = TRUE) ~ &quot;Non-specific Short Fragments&quot;, grepl(&quot;200 bp to 1000 bp&quot;, Range, ignore.case = TRUE) ~ &quot;Library&quot;, TRUE ~ NA_character_ ) ) comparisons &lt;- list(c(&quot;Single-Plate&quot;, &quot;Dual-Plate A&quot;), c(&quot;Dual-Plate A&quot;, &quot;Dual-Plate B&quot;), c(&quot;Single-Plate&quot;, &quot;Dual-Plate B&quot;)) figs3_5_1b &lt;- sn3_5_dreamprep_df_f %&gt;% ggplot(aes(x = plate, y = nmole_L, fill = plate)) + geom_boxplot(position = position_dodge(width = 0.75)) + geom_boxplot() + geom_point(position = position_jitterdodge(0.2)) + stat_compare_means( comparisons = comparisons, method = &quot;wilcox.test&quot;, label = &quot;p.signif&quot;, # &lt;-- show stars, not p = p.adjust.method = &quot;BH&quot;, size = 4, vjust = 0.2, # step.increase = 0.02, # Reduces vertical distance between labels tip.length = 0.01 ) + # scale_y_continuous(trans=&quot;log10&quot;) + facet_grid(Range ~ concentration, scales = &quot;free&quot;) + labs( y = &quot;nmol/μL&quot;, x = &quot;&quot;, ) + geom_jitter( position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8), size = 1.5, alpha = 0.3 ) + scale_fill_manual(values = c(&quot;#79b1a3&quot;, &quot;#f58262&quot;, &quot;#e3c7a0&quot;)) + custom_ggplot_theme + theme(legend.position = &quot;none&quot;) figs3_5_1b figs3_5_1 &lt;- cowplot::plot_grid(figs3_5_1a, figs3_5_1b, ncol = 1, labels = c(&quot;a&quot;, &quot;b&quot;), label_size = 16 ) Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;DNA Input 0.1 ng/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;ce&gt; Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;DNA Input 0.1 ng/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;bc&gt; Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;DNA Input 1 ng/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;ce&gt; Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;DNA Input 1 ng/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;bc&gt; Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;DNA Input 0.1 ng/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;ce&gt; Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;DNA Input 0.1 ng/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;bc&gt; Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;DNA Input 1 ng/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;ce&gt; Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;DNA Input 1 ng/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;bc&gt; figs3_5_1 ggsave(&quot;figures/FigS3_5_1.png&quot;, figs3_5_1, width = 10, height = 13, dpi = 300) ggsave(&quot;figures/FigS3_5_1.pdf&quot;, figs3_5_1, width = 10, height = 13) Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;nmol/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;ce&gt; Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;nmol/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;bc&gt; Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;DNA Input 0.1 ng/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;ce&gt; Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;DNA Input 0.1 ng/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;bc&gt; Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;DNA Input 0.1 ng/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;ce&gt; Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;DNA Input 0.1 ng/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;bc&gt; Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;DNA Input 1 ng/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;ce&gt; Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;DNA Input 1 ng/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;bc&gt; Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;DNA Input 1 ng/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;ce&gt; Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;DNA Input 1 ng/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;bc&gt; Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;nmol/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;ce&gt; Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;nmol/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;bc&gt; Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;nmol/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;ce&gt; Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : conversion failure on &#39;nmol/μL&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &lt;bc&gt; 2.5 MSSM method validation 2.5.1 Discriminative power and replicability of MSSM data 2.5.1.1 Data selection mssm_discriminative_df &lt;- macroquant_genome_counts_filt_30 %&gt;% select(genome, macroquant_metrics_filt_30 %&gt;% # select dataset filter( batch %in% c(&quot;MSEB0011&quot;), type_binomial %in% c(&quot;positive&quot;) ) %&gt;% pull(microsample)) %&gt;% select(where(~ !all(. == 0))) %&gt;% melt(id = &quot;genome&quot;) %&gt;% setNames(c(&quot;genome&quot;, &quot;microsample&quot;, &quot;count&quot;)) %&gt;% pivot_wider(names_from = genome, values_from = count, values_fill = 0) %&gt;% # samples as rows select(where(~ any(. != 0))) %&gt;% mutate(across(-microsample, ~ . / rowSums(across(where(is.numeric))) * 100)) %&gt;% # relative abundance column_to_rownames(var = &quot;microsample&quot;) 2.5.1.2 Centered Log-Ratio (CLR) Transformation And Principal Component Analysis (PCA) Note: The perform_pca() function needs to be loaded. mssm_discriminative_obj &lt;- perform_pca(mssm_discriminative_df) [1] &quot;Zeros found&quot; No. adjusted imputations: 492 Rows (samples) removed: 13 Columns (taxa) removed: 16 2.5.1.3 Permutational Multivariate Analysis of Variance (PERMANOVA) mssm_discriminative_metadata &lt;- macroquant_metrics_filt_30 %&gt;% filter(microsample %in% c(rownames(mssm_discriminative_obj$df_clr_dist))) unique(mssm_discriminative_metadata$animal) [1] &quot;G121e&quot; &quot;G103b&quot; unique(mssm_discriminative_metadata$cryosection) [1] &quot;G121eI103A&quot; &quot;G103bI301A&quot; &quot;G121eI103B&quot; &quot;G103bI301B&quot; # Perform betadisper analysis betadisper_animal &lt;- vegdist(mssm_discriminative_obj$df_clr_dist, method = &quot;euclidean&quot;) %&gt;% betadisper(., mssm_discriminative_metadata %&gt;% pull(animal)) # Check if there are significant differences in dispersion permutest(betadisper_animal, pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 40.59 40.590 42.486 999 0.001 *** Residuals 126 120.38 0.955 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) G103b G121e G103b 0.001 G121e 1.5502e-09 # Perform betadisper analysis betadisper_animal &lt;- vegdist(mssm_discriminative_obj$df_clr_dist, method = &quot;euclidean&quot;) %&gt;% betadisper(., mssm_discriminative_metadata %&gt;% pull(cryosection)) # Check if there are significant differences in dispersion permutest(betadisper_animal, pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 36.661 12.2202 12.574 999 0.001 *** Residuals 124 120.510 0.9719 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) G103bI301A G103bI301B G121eI103A G121eI103B G103bI301A 4.6600e-01 1.0000e-03 0.001 G103bI301B 4.4914e-01 1.0000e-03 0.014 G121eI103A 4.4153e-10 1.0553e-04 0.342 G121eI103B 8.6887e-05 1.3788e-02 3.3511e-01 # Tests homogeneity of dispersion and pairwise comparisons between groups using permutations. mssm_discriminative_metadata$group &lt;- interaction(mssm_discriminative_metadata$animal, mssm_discriminative_metadata$cryosection) betadisp_combined &lt;- betadisper(vegdist(mssm_discriminative_obj$df_clr_dist, method = &quot;euclidean&quot;), mssm_discriminative_metadata$group) permutest(betadisp_combined, permutations = 999) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 36.661 12.2202 12.574 999 0.001 *** Residuals 124 120.510 0.9719 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 vegdist(mssm_discriminative_obj$df_clr_dist, method = &quot;euclidean&quot;) %&gt;% adonis2( formula = . ~ animal + cryosection, data = mssm_discriminative_metadata, permutations = 999, by = &quot;terms&quot; ) %&gt;% broom::tidy() Warning in tidy.anova(.): The following column names in ANOVA output were not recognized or transformed: SumOfSqs, R2 # A tibble: 4 × 6 term df SumOfSqs R2 statistic p.value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 animal 1 3709. 0.815 573. 0.001 2 cryosection 2 37.7 0.00828 2.91 0.041 3 Residual 124 803. 0.176 NA NA 4 Total 127 4549. 1 NA NA 2.5.1.4 Amalia: PCA Visualisation Across Animal &amp; Cryosection (Suppl Fig. 5) autoplot(mssm_discriminative_obj$pca_result, data = mssm_discriminative_metadata, colour = &quot;animal&quot;, shape = &quot;cryosection&quot;, size = 3, alpha = 0.5, loadings = FALSE, scale = 0) + custom_ggplot_theme 2.5.2 Amalia: MSSM compared to FISH and Macro-scale Metagenomics 2.5.2.1 Amalia: MSSM vs FISH 2.5.2.2 Macro-scale Metagenomics vs Micro-scale Spatial Metagenomics 2.5.2.2.1 Compare Abundance At Genus level mivsma_ra_long &lt;- data.frame(otu_table(physeq_genus_relabund)) %&gt;% rownames_to_column(&quot;genome&quot;) %&gt;% melt(id = &quot;genome&quot;, variable.name = &quot;microsample&quot;, value.name = &quot;ra&quot;) %&gt;% left_join(data.frame(sample_data(physeq_genus_relabund)) %&gt;% rownames_to_column(var = &quot;microsample&quot;), by = &quot;microsample&quot;) mivsma_ra_plot &lt;- mivsma_ra_long %&gt;% filter(ra &gt; 0, group %in% c(&quot;Micro-scale Spatial Metagenomics&quot;)) %&gt;% group_by(genome, animal) %&gt;% summarise( mssm_mean_ra = mean(ra), mssm_sd_ra = sd(ra), .groups = &quot;drop&quot; ) %&gt;% left_join(mivsma_ra_long %&gt;% filter(group %in% c(&quot;Macro-scale Metagenomics&quot;)) %&gt;% select(genome, microsample, animal, ra) %&gt;% rename(macro_ra = ra), by = c(&quot;genome&quot;, &quot;animal&quot;)) %&gt;% left_join(data.frame(tax_table(physeq_genus_relabund)) %&gt;% rownames_to_column(var = &quot;genome&quot;), by = &quot;genome&quot;) %&gt;% mutate( dev = abs(mssm_mean_ra - macro_ra), genus_label = ifelse(dev &gt; 0.03, genus, &quot;&quot;), genus_color = ifelse( genus_label == &quot;&quot;, &quot;&quot;, order) ) ggplot(mivsma_ra_plot, aes(x = macro_ra, y = mssm_mean_ra, color = genus_color)) + geom_point() + geom_text_repel( aes(label = genus_label, color = genus_color), size = 3, max.overlaps = 100 ) + geom_errorbar(aes(ymin = mssm_mean_ra - mssm_sd_ra, ymax = mssm_mean_ra + mssm_sd_ra), width = 0.002) + # Error bars geom_abline(slope = 1, intercept = 0, linetype = &quot;dashed&quot;) + # Diagonal reference line labs(x = &quot;Relative abundance conventional&quot;, y = &quot;Relative abundance MSSM (mean)&quot;) + theme(legend.position = &quot;none&quot;) + facet_wrap(~animal) + custom_ggplot_theme + scale_color_manual(values = order_colors, drop = FALSE) + scale_x_continuous(limits = c(0, 0.3)) + # scale_y_continuous(limits = c(0, 0.3)) # mivsma_ra_genus_nmse &lt;- mivsma_ra_long %&gt;% filter(ra &gt; 0, group %in% c(&quot;Micro-scale Spatial Metagenomics&quot;)) %&gt;% left_join(mivsma_ra_long %&gt;% filter(group %in% c(&quot;Macro-scale Metagenomics&quot;)) %&gt;% select(genome, animal, ra) %&gt;% rename(macro_ra = ra), by = c(&quot;genome&quot;, &quot;animal&quot;)) %&gt;% group_by(genome, animal) %&gt;% summarise( genus_rmse = sqrt(mean((ra - macro_ra)^2, na.rm = TRUE)), genus_nrmse_sd = genus_rmse / sd(ra, na.rm = TRUE), # Best option for RA and CLR genus_nrmse_range = genus_rmse / (max(ra, na.rm = TRUE) - min(ra, na.rm = TRUE)), .groups = &quot;drop&quot; ) %&gt;% left_join(data.frame(tax_table(physeq_genus_relabund)) %&gt;% rownames_to_column(var = &quot;genome&quot;), by = &quot;genome&quot;) %&gt;% mutate( label_sd = ifelse(genus_nrmse_sd &gt; 6, genus, &quot;&quot;), label_rg = ifelse(genus_nrmse_range &gt; 2.5, genus, &quot;&quot;), label_rg_ord = ifelse(label_rg == &quot;&quot;,&quot;&quot;, order) , label_sd_ord = ifelse(label_sd == &quot;&quot;,&quot;&quot;, order) ) mivsma_ra_nmse &lt;- mivsma_ra_genus_nmse %&gt;% group_by(animal) %&gt;% summarise( mean = mean(genus_rmse), median = median(genus_rmse ), mean_sd = mean(genus_nrmse_sd), median_sd = median(genus_nrmse_sd), mean_range = mean(genus_nrmse_range), median_range = median(genus_nrmse_range) ) mivsma_ra_genus_nmse %&gt;% ggplot(aes(x = animal, y = genus_nrmse_sd)) + geom_boxplot(width = 0.3, outlier.shape = NA) + geom_jitter(aes(color = label_rg_ord), width = 0.1, alpha = 0.9) + geom_text_repel( aes(label = label_rg, color = label_rg_ord), size = 3, max.overlaps = 100 ) + scale_color_manual(values = order_colors, drop = FALSE) + custom_ggplot_theme + labs(x = &quot;Animal&quot;, y = &quot;Normalize RMSE \\n(Root Mean Squared Error)&quot;, colour = &quot;Order&quot;) mivsma_long &lt;- data.frame(otu_table(physeq_genus)) %&gt;% rownames_to_column(&quot;genome&quot;) %&gt;% melt(id = &quot;genome&quot;, variable.name = &quot;microsample&quot;, value.name = &quot;count&quot;) %&gt;% pivot_wider(names_from = genome, values_from = count, values_fill = 0) %&gt;% #mutate(across(-microsample, ~ . / rowSums(across(where(is.numeric))) * 100)) %&gt;% column_to_rownames(var = &quot;microsample&quot;) mivsma_clr &lt;- perform_pca(mivsma_long) [1] &quot;Zeros found&quot; Warning in cmultRepl(df, method = zero_method, output = &quot;prop&quot;, z.warning = 0.8, : Column no. 2 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 6 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 13 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 14 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 17 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 21 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 23 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 24 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 27 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 28 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 29 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 30 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 34 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 37 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 39 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 40 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 45 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 50 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 52 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 61 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 65 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 68 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 70 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Warning in cmultRepl(df, method = zero_method, output = &quot;prop&quot;, z.warning = 0.8, : Row no. 2 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 3 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 10 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 37 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 38 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 39 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 40 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 41 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 42 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 43 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 44 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 45 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 46 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 47 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 48 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 49 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 50 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 51 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 52 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 53 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 54 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 55 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 56 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 57 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 58 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 59 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 60 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 61 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 62 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 63 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 64 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 65 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 66 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 67 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 68 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 72 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 78 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 79 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 94 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 95 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 108 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 109 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 110 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 111 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 129 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 130 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 194 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 223 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 246 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 249 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 250 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 256 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 268 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 271 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 276 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 284 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 287 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 289 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 291 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 296 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 297 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 301 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 315 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 325 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 338 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 345 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 352 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 353 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 369 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 386 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 407 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 409 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 419 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 420 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 421 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 432 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 453 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 458 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 474 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 479 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 489 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 491 containing &gt;80% zeros/unobserved values deleted (see arguments z.warning and z.delete). Row no. 495 containing &gt;80% zero No. adjusted imputations: 1023 Rows (samples) removed: 88 Columns (taxa) removed: 23 mivsma_clr_meta &lt;- data.frame(sample_data(physeq_genus)) %&gt;% rownames_to_column(&quot;microsample&quot;) %&gt;% filter(microsample %in% c(rownames(mivsma_clr$df_clr))) mivsma_clr_long &lt;- mivsma_clr$df_clr %&gt;% rownames_to_column(var = &quot;microsample&quot;) %&gt;% pivot_longer(-microsample, names_to = &quot;genome&quot;, values_to = &quot;clr_value&quot;) %&gt;% left_join(data.frame(tax_table(physeq_genus)) %&gt;% rownames_to_column(var = &quot;genome&quot;), by = &quot;genome&quot;) %&gt;% left_join(data.frame(sample_data(physeq_genus)) %&gt;% rownames_to_column(var = &quot;microsample&quot;), by = &quot;microsample&quot;) %&gt;% select(microsample, genome, clr_value, domain, phylum, class, order, family, genus, animal, cryosection, group) autoplot(mivsma_clr$pca_result, data = mivsma_clr_meta, colour = &quot;group&quot;, shape = &quot;animal&quot;, size = 3, alpha = 0.5) + custom_ggplot_theme mivsma_clr_genus_nmse &lt;- mivsma_clr_long %&gt;% filter(group %in% c(&quot;Micro-scale Spatial Metagenomics&quot;)) %&gt;% left_join(mivsma_clr_long %&gt;% filter(group %in% c(&quot;Macro-scale Metagenomics&quot;)) %&gt;% select(genome, animal, clr_value) %&gt;% rename(macro_clr = clr_value), by = c(&quot;genome&quot;, &quot;animal&quot;)) %&gt;% group_by(genome, animal) %&gt;% summarise( genus_rmse = sqrt(mean((clr_value - macro_clr)^2, na.rm = TRUE)), genus_nrmse_sd = genus_rmse / sd(clr_value, na.rm = TRUE), # Best option for RA and CLR genus_nrmse_range = genus_rmse / (max(clr_value, na.rm = TRUE) - min(clr_value, na.rm = TRUE)), .groups = &quot;drop&quot; ) %&gt;% left_join(data.frame(tax_table(physeq_genus)) %&gt;% rownames_to_column(var = &quot;genome&quot;), by = &quot;genome&quot;) %&gt;% mutate( label_sd = ifelse(genus_nrmse_sd &gt; 5, genus, &quot;&quot;), label_rg = ifelse(genus_nrmse_range &gt; 1, genus, &quot;&quot;), label_rg_ord = ifelse(label_rg == &quot;&quot;,&quot;&quot;, order), label_sd_ord = ifelse(label_sd == &quot;&quot;,&quot;&quot;, order) ) mivsma_clr_nmse &lt;- mivsma_clr_genus_nmse %&gt;% group_by(animal) %&gt;% summarise( mean = mean(genus_rmse), median = median(genus_rmse ), mean_sd = mean(genus_nrmse_sd), median_sd = median(genus_nrmse_sd), mean_range = mean(genus_nrmse_range), median_range = median(genus_nrmse_range) ) mivsma_clr_genus_nmse %&gt;% ggplot(aes(x = animal, y = genus_nrmse_sd)) + geom_boxplot(width = 0.3, outlier.shape = NA) + geom_jitter(aes(color = label_rg_ord), width = 0.1, alpha = 0.9) + geom_text_repel( aes(label = label_rg, color = label_rg_ord), size = 3, max.overlaps = 100 ) + scale_color_manual(values = order_colors, drop = FALSE) + custom_ggplot_theme + labs(x = &quot;Animal&quot;, y = &quot;Normalize RMSE \\n(Root Mean Squared Error)&quot;, colour = &quot;Order&quot;) 2.5.2.2.2 Compare Presence/Absence At Genus level mivsma_phylo_lg &lt;- pivot_phylo( phyloseq_obj = subset_samples( physeq_all, type_binomial == &quot;positive&quot; &amp; !section == &quot;Colon&quot; &amp; !section == &quot;Ileum&quot; ), glom = TRUE, tax_transform = TRUE, taxon_level = &quot;genus&quot;, tr_method = &quot;compositional&quot; ) %&gt;% filter(abundance &gt; 0) Warning: otu_table of counts is NOT available! Available otu_table contains 14135 values that are not non-negative integers 2.5.2.2.2.1 Shared Genera mivsma_micro &lt;- unique(mivsma_phylo_lg %&gt;% filter(group %in% c(&quot;Micro-scale Spatial Metagenomics&quot;)) %&gt;% pull(genus)) mivsma_macro &lt;- unique(mivsma_phylo_lg %&gt;% filter(group %in% c(&quot;Macro-scale Metagenomics&quot;)) %&gt;% pull(genus)) mivsma_micro_unique &lt;- setdiff(mivsma_micro, mivsma_macro) mivsma_macro_unique &lt;- setdiff(mivsma_macro, mivsma_micro) mivsma_df &lt;- tibble( genus = c(mivsma_micro_unique, mivsma_macro_unique), source = c( rep(&quot;Micro-scale Spatial Metagenomics&quot;, length(mivsma_micro_unique)), rep(&quot;Macro-scale Metagenomics&quot;, length(mivsma_macro_unique)) ) ) cat(&quot;Shared Genera =&quot;, length(intersect(mivsma_micro, mivsma_macro)),&quot;\\n&quot;) Shared Genera = 62 cat(&quot;Unique Genera in Micro-scale Spatial Metagenomics =&quot;, length(mivsma_micro_unique), &quot;\\n&quot;) Unique Genera in Micro-scale Spatial Metagenomics = 5 cat(&quot;Unique Genera in Macro-scale Metagenomics =&quot;, length(mivsma_macro_unique), &quot;\\n&quot;) Unique Genera in Macro-scale Metagenomics = 5 (length(intersect(mivsma_micro, mivsma_macro))/length(unique(mivsma_phylo_lg %&gt;% pull(genus))))*100 [1] 86.11111 (length(mivsma_micro_unique)/length(unique(mivsma_phylo_lg %&gt;% pull(genus))))*100 [1] 6.944444 (length(mivsma_macro_unique)/length(unique(mivsma_phylo_lg %&gt;% pull(genus))))*100 [1] 6.944444 2.5.2.2.2.2 Shared Genera 35 Days Animal (G121e) mivsma_35d_micro &lt;- unique(mivsma_phylo_lg %&gt;% filter(group %in% c(&quot;Micro-scale Spatial Metagenomics&quot;), animal %in% c(&quot;G121e&quot;)) %&gt;% pull(genus)) mivsma_35d_macro &lt;- unique(mivsma_phylo_lg %&gt;% filter(group %in% c(&quot;Macro-scale Metagenomics&quot;), animal %in% c(&quot;G121e&quot;)) %&gt;% pull(genus)) mivsma_35d_micro_unique &lt;- setdiff(mivsma_35d_micro, mivsma_35d_macro) mivsma_35d_macro_unique &lt;- setdiff(mivsma_35d_macro, mivsma_35d_micro) mivsma_35d_df &lt;- tibble( genus = c(mivsma_35d_micro_unique, mivsma_35d_macro_unique), source = c( rep(&quot;Micro-scale Spatial Metagenomics&quot;, length(mivsma_35d_micro_unique)), rep(&quot;Macro-scale Metagenomics&quot;, length(mivsma_35d_macro_unique)) ) ) cat(&quot;Shared Genera =&quot;, length(intersect(mivsma_35d_micro, mivsma_35d_macro)),&quot;\\n&quot;) Shared Genera = 61 cat(&quot;Unique Genera in Micro-scale Spatial Metagenomics =&quot;, length(mivsma_35d_micro_unique), &quot;\\n&quot;) Unique Genera in Micro-scale Spatial Metagenomics = 5 cat(&quot;Unique Genera in Macro-scale Metagenomics =&quot;, length(mivsma_35d_macro_unique), &quot;\\n&quot;) Unique Genera in Macro-scale Metagenomics = 0 (length(intersect(mivsma_35d_micro, mivsma_35d_macro))/length(unique(mivsma_phylo_lg %&gt;% filter( animal %in% c(&quot;G121e&quot;)) %&gt;% pull(genus))))*100 [1] 92.42424 (length(mivsma_35d_micro_unique)/length(unique(mivsma_phylo_lg %&gt;% filter( animal %in% c(&quot;G121e&quot;))%&gt;% pull(genus))))*100 [1] 7.575758 (length(mivsma_35d_macro_unique)/length(unique(mivsma_phylo_lg %&gt;% filter( animal %in% c(&quot;G121e&quot;))%&gt;% pull(genus))))*100 [1] 0 2.5.2.2.2.3 Shared Genera 14 Days Animal (G103b) mivsma_14d_micro &lt;- unique(mivsma_phylo_lg %&gt;% filter(group %in% c(&quot;Micro-scale Spatial Metagenomics&quot;), animal %in% c(&quot;G103b&quot;)) %&gt;% pull(genus)) mivsma_14d_macro &lt;- unique(mivsma_phylo_lg %&gt;% filter(group %in% c(&quot;Macro-scale Metagenomics&quot;), animal %in% c(&quot;G103b&quot;)) %&gt;% pull(genus)) mivsma_14d_micro_unique &lt;- setdiff(mivsma_14d_micro, mivsma_14d_macro) mivsma_14d_macro_unique &lt;- setdiff(mivsma_14d_macro, mivsma_14d_micro) mivsma_14d_df &lt;- tibble( genus = c(mivsma_14d_micro_unique, mivsma_14d_macro_unique), source = c( rep(&quot;Micro-scale Spatial Metagenomics&quot;, length(mivsma_14d_micro_unique)), rep(&quot;Macro-scale Metagenomics&quot;, length(mivsma_14d_macro_unique)) ) ) cat(&quot;Shared Genera =&quot;, length(intersect(mivsma_14d_micro, mivsma_14d_macro)),&quot;\\n&quot;) Shared Genera = 23 cat(&quot;Unique Genera in Micro-scale Spatial Metagenomics =&quot;, length(mivsma_14d_micro_unique), &quot;\\n&quot;) Unique Genera in Micro-scale Spatial Metagenomics = 8 cat(&quot;Unique Genera in Macro-scale Metagenomics =&quot;, length(mivsma_14d_macro_unique), &quot;\\n&quot;) Unique Genera in Macro-scale Metagenomics = 11 (length(intersect(mivsma_14d_micro, mivsma_14d_macro))/length(unique(mivsma_phylo_lg %&gt;% filter( animal %in% c(&quot;G103b&quot;)) %&gt;% pull(genus))))*100 [1] 54.7619 (length(mivsma_14d_micro_unique)/length(unique(mivsma_phylo_lg %&gt;% filter( animal %in% c(&quot;G103b&quot;))%&gt;% pull(genus))))*100 [1] 19.04762 (length(mivsma_14d_macro_unique)/length(unique(mivsma_phylo_lg %&gt;% filter( animal %in% c(&quot;G103b&quot;))%&gt;% pull(genus))))*100 [1] 26.19048 2.5.2.2.2.4 Supplementary Table 1 total_microsamples &lt;- length(unique(mivsma_phylo_lg %&gt;% filter(group %in% c(&quot;Micro-scale Spatial Metagenomics&quot;), animal %in% c(&quot;G121e&quot;), !section %in%c(&quot;Colon&quot;, &quot;Ileum&quot;)) %&gt;% pull(microsample))) mivsma_phylo_lg %&gt;% filter(group %in% c(&quot;Micro-scale Spatial Metagenomics&quot;), animal %in% c(&quot;G121e&quot;), !section %in%c(&quot;Colon&quot;, &quot;Ileum&quot;), genus %in% mivsma_35d_micro_unique) %&gt;% group_by(genus) %&gt;% summarise( #Prevalence = sum(abundance &gt; 0), Prevalence_Total = round(sum(abundance &gt; 0)/total_microsamples, 3), mean_abundance = round(mean(abundance),3) ) # A tibble: 5 × 3 genus Prevalence_Total mean_abundance &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Anaerostipes 0.776 0.003 2 Merdimonas 0.43 0.002 3 Gordonibacter 0.319 0.001 4 Enterococcus_D 0.015 0.001 5 Blautia_A 0.004 0.002 2.5.2.2.2.5 Fig. 5a total_microsamples &lt;- length(unique(mivsma_phylo_lg %&gt;% filter(group %in% c(&quot;Micro-scale Spatial Metagenomics&quot;), animal %in% c(&quot;G103b&quot;), !section %in%c(&quot;Colon&quot;, &quot;Ileum&quot;)) %&gt;% pull(microsample))) mivsma_14d_phylo &lt;- subset_samples( physeq_all, type_binomial == &quot;positive&quot; &amp; !section == &quot;Colon&quot; &amp; !section == &quot;Ileum&quot; &amp; animal == &quot;G103b&quot; ) mivsma_14d_phylo &lt;- prune_taxa(taxa_sums(mivsma_14d_phylo) &gt; 0, mivsma_14d_phylo) cols1 &lt;- c(&quot;#346254&quot;, &quot;grey&quot;) names(cols1) &lt;- unique(samdat_tbl(mivsma_14d_phylo)$group) fig5a &lt;- tax_transform(mivsma_14d_phylo, &quot;binary&quot;, rank = &quot;genus&quot;) %&gt;% comp_heatmap( sample_anno = sampleAnnotation( &quot;Dataset&quot; = anno_sample_cat( &quot;group&quot;, col = cols1, box_col = NA, border_col = &quot;black&quot;, legend_title = &quot;Dataset&quot; ), &quot;Sequencing Yield&quot; = anno_sample(&quot;total_before_filtering.total_reads&quot;), border = TRUE, show_legend = c(TRUE) ), # Show sample annotation legend sample_names_show = FALSE, tax_anno = taxAnnotation( Prev. = anno_tax_prev(), Abun. = anno_tax_box() ), show_heatmap_legend = FALSE, heatmap_legend_param = list( title_position = &quot;lefttop&quot;, # Customize heatmap legend title position if needed legend_direction = &quot;horizontal&quot;, # Move heatmap legend horizontally legend_width = unit(6, &quot;cm&quot;) # Adjust the heatmap legend width ) ) Warning: otu_table of counts is NOT available! otu_table of counts is NOT available! otu_table of counts is NOT available! otu_table of counts is NOT available! Available otu_table contains 1926 values that are not non-negative integers save_heatmap &lt;- function() { # Save as PDF with appropriate size in inches pdf(&quot;figures/Fig5a.pdf&quot;, width = 10, height = 8.8) # Adjust to desired paper size fig5a %&gt;% ComplexHeatmap::draw( annotation_legend_list = attr(fig5a, &quot;AnnoLegends&quot;), heatmap_legend_side = &quot;bottom&quot;, annotation_legend_side = &quot;bottom&quot; ) dev.off() } save_heatmap() quartz_off_screen 2 save_heatmap &lt;- function() { png(&quot;figures/Fig5a.png&quot;, width = 2500, height = 2200, res = 300) fig5a %&gt;% ComplexHeatmap::draw( annotation_legend_list = attr(fig5a, &quot;AnnoLegends&quot;), heatmap_legend_side = &quot;bottom&quot;, annotation_legend_side = &quot;bottom&quot; ) dev.off() } save_heatmap() quartz_off_screen 2 2.5.3 MSSM method implementation 2.5.3.1 Spatial Pattern 2.5.3.1.1 Data selection metadata &lt;- macroquant_metrics_filt_30 %&gt;% filter( type_binomial %in% c(&quot;positive&quot;), cov_filtering %in% c(&quot;Retained By Filtering&quot;), !section %in% &quot;Ileum&quot;, !is.na(Xcoord), !animal %in% &quot;G103b&quot; ) comm_data &lt;- macroquant_genome_counts_filt_30 %&gt;% select(genome, metadata$microsample) %&gt;% t() %&gt;% data.frame() %&gt;% row_to_names(row_number = 1) %&gt;% mutate(across(everything(), as.numeric)) #table(rowSums(comm_data) &gt; 0) #all(metadata$microsample == rownames(comm_data)) #table(is.na(comm_data)) #table(metadata$section, metadata$cryosection) comm_ca &lt;- comm_data[metadata$section == &quot;Caecum right&quot;, ] comm_ca &lt;- comm_ca[, colSums(comm_ca) &gt; 0] comm_co &lt;- comm_data[metadata$section == &quot;Colon&quot;, ] comm_co &lt;- comm_co[, colSums(comm_co) &gt; 0] metadata_ca &lt;- metadata[metadata$section == &quot;Caecum right&quot;, ] metadata_co &lt;- metadata[metadata$section == &quot;Colon&quot;, ] table(metadata$section, metadata$cryosection) G121eI101B G121eI102A G121eI103A G121eI103B G121eI104A G121eI104B G121eI104C G121eO301A G121eO302A G121eO302B Caecum right 35 38 35 35 33 35 50 0 0 0 Colon 0 0 0 0 0 0 0 65 33 28 table(metadata$section, metadata$animal) G121e Caecum right 261 Colon 126 2.5.3.1.2 Transform the data for posterior multivariate analyses comm_ca_zeroRepl &lt;- cmultRepl(comm_ca, method = &quot;GBM&quot;, output = &quot;prop&quot;, z.warning = 0.95) No. adjusted imputations: 881 comm_co_zeroRepl &lt;- cmultRepl(comm_co, method = &quot;GBM&quot;, output = &quot;prop&quot;, z.warning = 0.95) No. adjusted imputations: 933 metadata_ca_clr &lt;- metadata_ca[metadata_ca$microsample %in% rownames(comm_ca_zeroRepl), ] metadata_co_clr &lt;- metadata_co[metadata_co$microsample %in% rownames(comm_co_zeroRepl), ] clr_transform &lt;- function(x) { log(x) - mean(log(x), na.rm = TRUE) } comm_ca_clr &lt;- data.frame(t(apply(comm_ca_zeroRepl, 1, clr_transform))) comm_co_clr &lt;- data.frame(t(apply(comm_co_zeroRepl, 1, clr_transform))) 2.5.3.1.3 Diversity partitioning ## Diversity partitioning in caecum and colon ca_adipart &lt;- adipart(as.matrix(comm_ca &gt; 0) * 1, as.matrix(metadata_ca[, c(&quot;microsample&quot;, &quot;cryosection&quot;)]), index = &quot;richness&quot;, weights = &quot;unif&quot;, relative = FALSE, nsimul = 999, method = &quot;r2dtable&quot; ) co_adipart &lt;- adipart(as.matrix(comm_co &gt; 0) * 1, as.matrix(metadata_co[, c(&quot;microsample&quot;, &quot;cryosection&quot;)]), index = &quot;richness&quot;, weights = &quot;unif&quot;, relative = FALSE, nsimul = 999, method = &quot;r2dtable&quot; ) ca &lt;- cbind( c(ca_adipart$oecosimu$mean[1], ca_adipart$statistic[1]), c(ca_adipart$oecosimu$mean[3], ca_adipart$statistic[3]), c(ca_adipart$oecosimu$mean[2], ca_adipart$statistic[2]) ) rownames(ca) &lt;- c(&quot;observed&quot;, &quot;expected&quot;) colnames(ca) &lt;- c(&quot;alpha&quot;, &quot;beta&quot;, &quot;gamma&quot;) co &lt;- cbind( c(co_adipart$oecosimu$mean[1], co_adipart$statistic[1]), c(co_adipart$oecosimu$mean[3], co_adipart$statistic[3]), c(co_adipart$oecosimu$mean[2], co_adipart$statistic[2]) ) rownames(co) &lt;- c(&quot;observed&quot;, &quot;expected&quot;) colnames(co) &lt;- c(&quot;alpha&quot;, &quot;beta&quot;, &quot;gamma&quot;) par(mfrow = c(1, 2)) bp &lt;- barplot(ca, beside = TRUE, col = c(&quot;black&quot;, &quot;white&quot;), ylim = c(0, 110) ) text(x = apply(bp, 2, mean), y = apply(ca, 2, max) + 7, labels = &quot;***&quot;) title(main = &quot;Caecum&quot;, font.main = 4) bp &lt;- barplot(co, beside = TRUE, col = c(&quot;black&quot;, &quot;white&quot;), ylim = c(0, 110) ) text(x = apply(bp, 2, mean), y = apply(co, 2, max) + 7, labels = &quot;***&quot;) title(main = &quot;Colon&quot;, font.main = 4) par(mfrow = c(1, 1)) 2.5.3.1.4 Explore Spatial Pattern Note: The spatial_cryosections() function needs to be loaded. ###### Ceacum Cryosection (G121eI104C) results_ca &lt;- spatial_cryosections( cryosection_list = &quot;G121eI104C&quot;, metadata_df = metadata_ca_clr, comm_clr = comm_ca_clr ) 2.5.3.1.4.0.1 Mantel test results_ca$mantel_results$G121eI104C Mantel statistic based on Pearson&#39;s product-moment correlation Call: vegan::mantel(xdis = dist(comm_data), ydis = dist(metadata_data[, c(&quot;Xcoord&quot;, &quot;Ycoord&quot;)]), permutations = 999) Mantel statistic r: 0.04177 Significance: 0.247 Upper quantiles of permutations (null model): 90% 95% 97.5% 99% 0.0757 0.0977 0.1173 0.1312 Permutation: free Number of permutations: 999 #results_ca$mantel_results$G121eI104C$statistic #results_ca$mantel_results$G121eI104C$signif # p &lt; 0.05 → Statistically significant correlation between two distance matrices # p &gt; 0.05 → No significant correlation between two distance matrices 2.5.3.1.4.0.2 Mantel Correlogram Stat results_ca$mantelcor_results $G121eI104C Mantel Correlogram Analysis Call: vegan::mantel.correlog(D.eco = dist(comm_data), D.geo = dist(metadata_data[, c(&quot;Xcoord&quot;, &quot;Ycoord&quot;)]), nperm = 999) class.index n.dist Mantel.cor Pr(Mantel) Pr(corrected) D.cl.1 3.0232e+02 9.8000e+01 3.4267e-02 0.115 0.115 D.cl.2 6.4264e+02 2.4200e+02 9.9833e-03 0.353 0.353 D.cl.3 9.8296e+02 3.0400e+02 3.7801e-02 0.125 0.345 D.cl.4 1.3233e+03 3.7200e+02 2.2923e-02 0.245 0.490 D.cl.5 1.6636e+03 3.7800e+02 -8.5846e-03 0.380 0.735 D.cl.6 2.0039e+03 3.1600e+02 -3.8269e-02 0.060 0.360 D.cl.7 2.3442e+03 2.7800e+02 -2.9388e-02 0.162 0.690 D.cl.8 2.6846e+03 2.1000e+02 NA NA NA D.cl.9 3.0249e+03 1.2800e+02 NA NA NA D.cl.10 3.3652e+03 8.8000e+01 NA NA NA D.cl.11 3.7055e+03 2.4000e+01 NA NA NA D.cl.12 4.0459e+03 1.0000e+01 NA NA NA 2.5.3.1.4.0.3 Mantel Correlogram Plot mantel_ca_grob &lt;- ggplot( data.frame(results_ca$mantelcor_results$G121eI104C$mantel.res) %&gt;% mutate(sign_label = ifelse(`Pr.Mantel.` &lt;= 0.05, &quot;Significant&quot;, &quot;Not significant&quot;)) %&gt;% filter(!is.na(Mantel.cor)), aes(x = class.index, y = Mantel.cor) ) + geom_point(aes(fill = sign_label), shape = 23, size = 3) + geom_line() + scale_fill_manual(values = c(&quot;Significant&quot; = &quot;black&quot;, &quot;Not significant&quot; = &quot;white&quot;)) + labs( title = &quot;G121eI104C&quot;, x = &quot;Distance Class Index&quot;, y = &quot;Mantel Correlation&quot;, color = &quot;Significance&quot; ) + geom_hline(yintercept = 0, color = &quot;red&quot;) + custom_ggplot_theme + theme(legend.position = &quot;none&quot;) mantel_ca_grob 2.5.3.1.4.0.4 Distance Decay Stat aovperm(lmperm(comm_dist~spat_dist,data=results_ca$decay_dfs$G121eI104C),np=10000) Anova Table Resampling test using freedman_lane to handle nuisance variables and 10000 permutations. SS df F parametric P(&gt;F) resampled P(&gt;F) spat_dist 4.591 1 2.138 0.144 0.1414 Residuals 2626.761 1223 # p &lt; 0.05 → Significant correlation: Spatial distance influences microbial composition. # p &gt; 0.05 → No significant relationship: Microbial communities do not change with distance. 2.5.3.1.4.0.5 Distance Decay Plot results_ca$distance_decay_plots$G121eI104C 2.5.3.1.4.1 Colon Cryosection (G121eO301A) results_co &lt;- spatial_cryosections( cryosection_list = &quot;G121eO301A&quot;, metadata_df = metadata_co_clr, comm_clr = comm_co_clr ) 2.5.3.1.4.1.1 Mantel test results_co$mantel_results$G121eO301A Mantel statistic based on Pearson&#39;s product-moment correlation Call: vegan::mantel(xdis = dist(comm_data), ydis = dist(metadata_data[, c(&quot;Xcoord&quot;, &quot;Ycoord&quot;)]), permutations = 999) Mantel statistic r: 0.07154 Significance: 0.055 Upper quantiles of permutations (null model): 90% 95% 97.5% 99% 0.0566 0.0742 0.0891 0.1052 Permutation: free Number of permutations: 999 # p &lt; 0.05 → Statistically significant correlation between two distance matrices # p &gt; 0.05 → No significant correlation between two distance matrices 2.5.3.1.4.1.2 Mantel Correlogram Stat results_co$mantelcor_results $G121eO301A Mantel Correlogram Analysis Call: vegan::mantel.correlog(D.eco = dist(comm_data), D.geo = dist(metadata_data[, c(&quot;Xcoord&quot;, &quot;Ycoord&quot;)]), nperm = 999) class.index n.dist Mantel.cor Pr(Mantel) Pr(corrected) D.cl.1 3.8826e+02 2.3400e+02 6.4231e-02 0.007 0.007 ** D.cl.2 9.6978e+02 4.2600e+02 -2.9870e-02 0.119 0.119 D.cl.3 1.5513e+03 5.0800e+02 2.0777e-02 0.210 0.238 D.cl.4 2.1328e+03 5.8800e+02 1.8485e-02 0.264 0.420 D.cl.5 2.7143e+03 5.6800e+02 4.2960e-02 0.060 0.240 D.cl.6 3.2958e+03 5.0800e+02 -9.4513e-03 0.303 0.630 D.cl.7 3.8773e+03 4.1200e+02 -1.0338e-02 0.323 0.840 D.cl.8 4.4589e+03 2.8800e+02 NA NA NA D.cl.9 5.0404e+03 2.6600e+02 NA NA NA D.cl.10 5.6219e+03 1.6200e+02 NA NA NA D.cl.11 6.2034e+03 1.2400e+02 NA NA NA D.cl.12 6.7849e+03 4.4000e+01 NA NA NA D.cl.13 7.3664e+03 3.0000e+01 NA NA NA --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 2.5.3.1.4.1.3 Mantel Correlogram Plot mantel_co_grob &lt;- ggplot( data.frame(results_co$mantelcor_results$G121eO301A$mantel.res) %&gt;% mutate(sign_label = ifelse(`Pr.Mantel.` &lt;= 0.05, &quot;Significant&quot;, &quot;Not significant&quot;)) %&gt;% filter(!is.na(Mantel.cor)), aes(x = class.index, y = Mantel.cor) ) + geom_point(aes(fill = sign_label), shape = 23, size = 3) + geom_line() + scale_fill_manual(values = c(&quot;Significant&quot; = &quot;black&quot;, &quot;Not significant&quot; = &quot;white&quot;)) + labs( title = &quot;G121eO301A&quot;, x = &quot;Distance Class Index&quot;, y = &quot;Mantel Correlation&quot;, color = &quot;Significance&quot; ) + geom_hline(yintercept = 0, color = &quot;red&quot;) + custom_ggplot_theme + theme(legend.position = &quot;none&quot;) mantel_co_grob 2.5.3.1.4.1.4 Distance Decay Stat #summary(lmPerm::lmp(comm_dist ~ spat_dist, data = results_co$decay_dfs$G121eO301A)) aovperm(lmperm(comm_dist~spat_dist,data=results_co$decay_dfs$G121eO301A),np=10000) Anova Table Resampling test using freedman_lane to handle nuisance variables and 10000 permutations. SS df F parametric P(&gt;F) resampled P(&gt;F) spat_dist 31.59 1 10.69 0.001095 0.0012 Residuals 6140.15 2078 # Performs an ANOVA to check if spat_dist significantly explains variation in comm_dist. # p &lt; 0.05 → Significant correlation: Spatial distance influences microbial composition. # p &gt; 0.05 → No significant relationship: Microbial communities do not change with distance. 2.5.3.1.4.1.5 Distance Decay Plot results_co$distance_decay_plots$G121eO301A figs4_2 &lt;- cowplot::plot_grid( results_co$distance_decay_plots$G121eO301A, mantel_co_grob, results_ca$distance_decay_plots$G121eI104C, mantel_ca_grob, ncol = 2, labels = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;), label_size = 16 ) figs4_2 ggsave(&quot;figures/FigS4_2.png&quot;, figs4_2, width = 10, height = 9, dpi = 300) 2.5.3.1.4.2 RLQ-rlqESLTP Analysis (G121eO301A) source(&quot;data/JEC_1743_sm_apps5.txt&quot;) # comm_co_G121eO301A &lt;- results_co$cryosection_dfs[[cryosection]]$comm_clr # metadata_co_G121eO301A &lt;- results_co$cryosection_dfs[[cryosection]]$metadata comm_co_G121eO301A &lt;- comm_co %&gt;% as.data.frame() %&gt;% rownames_to_column(var = &quot;microsample&quot;) %&gt;% bind_cols(metadata_co) %&gt;% filter(cryosection == &quot;G121eO301A&quot;) %&gt;% select(contains(&quot;bin_&quot;)) metadata_co_G121eO301A &lt;- metadata_co %&gt;% filter(cryosection == &quot;G121eO301A&quot;) comp &lt;- decostand(comm_co_G121eO301A, MARGIN = 1, method = &quot;hellinger&quot;) # Standardize composition by rows colnames(comp) &lt;- gsub(&quot;\\\\.&quot;, &quot;:&quot;, names(comp)) env &lt;- data.frame( log_seq_counts = log(metadata_co_G121eO301A$total_after_filtering.total_reads), div = rowSums(comp &gt; 0) ) # Environmental matrix genome_gifts &lt;- macromag_gifts[rownames(macromag_gifts) %in% colnames(comp), ] genome_funct &lt;- genome_gifts %&gt;% data.frame() %&gt;% rownames_to_column(var = &quot;id&quot;) %&gt;% # Preserve row names as a column pivot_longer(-id, names_to = &quot;column&quot;, values_to = &quot;value&quot;) %&gt;% # Reshape to long format mutate(group = substr(column, 1, 3)) %&gt;% # Extract the first 3 characters of column names group_by(id, group) %&gt;% # Group by row (id) and prefix summarise(mean_value = mean(value, na.rm = TRUE), .groups = &quot;drop&quot;) %&gt;% # Calculate rowMeans for each group pivot_wider(names_from = group, values_from = mean_value) %&gt;% # Reshape back to wide format column_to_rownames(var = &quot;id&quot;) genome_funct &lt;- genome_funct[, -c(19:21)] phy &lt;- macromag_tree # Phylogenetic tree constructed with Phylomatic V3 + Phylocom phy &lt;- drop.tip(phy, setdiff(phy$tip.label, rownames(genome_funct))) spa &lt;- metadata_co_G121eO301A[, c(&quot;Xcoord&quot;, &quot;Ycoord&quot;)] # Matrix of X Y spatial coordinates comp &lt;- comp[, match(phy$tip.label, colnames(comp))] genome_funct &lt;- genome_funct[match(phy$tip.label, rownames(genome_funct)), ] mean(phy$tip.label == colnames(comp)) [1] 1 # Change the phylogenetic tree (an object of the class &quot;phylo&quot;) into an object of the class &quot;phylog&quot;, used by ade4 phylog &lt;- newick2phylog(write.tree(phy)) # =&gt; &quot;phylog&quot; class colnames(comp) &lt;- gsub(&quot;:&quot;, &quot;_&quot;, colnames(comp)) rownames(genome_funct) &lt;- gsub(&quot;:&quot;, &quot;_&quot;, rownames(genome_funct)) 2.5.3.1.4.3 Correspondence analysis of the composition matrix coacomp &lt;- dudi.coa(comp, scan = FALSE, nf = 108) summary(coacomp) Class: coa dudi Call: dudi.coa(df = comp, scannf = FALSE, nf = 108) Total inertia: 0.2697 Eigenvalues: Ax1 Ax2 Ax3 Ax4 Ax5 0.07354 0.03028 0.01535 0.01389 0.01082 Projected inertia (%): Ax1 Ax2 Ax3 Ax4 Ax5 27.269 11.230 5.691 5.149 4.011 Cumulative projected inertia (%): Ax1 Ax1:2 Ax1:3 Ax1:4 Ax1:5 27.27 38.50 44.19 49.34 53.35 (Only 5 dimensions (out of 64) are shown) 2.5.3.1.4.4 Spatial analysis 2.5.3.1.4.5 Gabriel graph # Create the Gabriel graph nb1 &lt;- graph2nb(gabrielneigh(as.matrix(spa)), sym = T) nb1 Neighbour list object: Number of regions: 65 Number of nonzero links: 220 Percentage nonzero weights: 5.207101 Average number of links: 3.384615 # Spatial autocorrelation in diversity and sequence count distribution sp.correlogram(nb1, log(env$div), order = 8, method = &quot;I&quot;) Spatial correlogram for log(env$div) method: Moran&#39;s I estimate expectation variance standard deviate Pr(I) two sided 1 (65) 0.1522777 -0.0156250 0.0081623 1.8585 0.06310 . 2 (65) -0.0977373 -0.0156250 0.0047869 -1.1868 0.23530 3 (65) 0.0827417 -0.0156250 0.0034424 1.6765 0.09363 . 4 (65) -0.0307024 -0.0156250 0.0030602 -0.2726 0.78520 5 (65) -0.0989956 -0.0156250 0.0031002 -1.4973 0.13431 6 (65) 0.0052364 -0.0156250 0.0034963 0.3528 0.72423 7 (65) -0.0433125 -0.0156250 0.0043139 -0.4215 0.67335 8 (65) -0.0978301 -0.0156250 0.0054539 -1.1131 0.26565 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 sp.correlogram(nb1, env$log_seq_counts, order = 8, method = &quot;I&quot;) Spatial correlogram for env$log_seq_counts method: Moran&#39;s I estimate expectation variance standard deviate Pr(I) two sided 1 (65) 0.1408477 -0.0156250 0.0088733 1.6611 0.09669 . 2 (65) -0.1080443 -0.0156250 0.0052016 -1.2814 0.20004 3 (65) 0.0648864 -0.0156250 0.0037409 1.3163 0.18806 4 (65) -0.0314377 -0.0156250 0.0033246 -0.2742 0.78390 5 (65) -0.1155620 -0.0156250 0.0033645 -1.7229 0.08490 . 6 (65) -0.0098926 -0.0156250 0.0037942 0.0931 0.92585 7 (65) -0.0776257 -0.0156250 0.0046857 -0.9057 0.36507 8 (65) -0.0532311 -0.0156250 0.0059271 -0.4885 0.62522 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 lw1 &lt;- nb2listw(nb1) # gives a neighbours list with spatial weights (i.e. matrix W) lw1 Characteristics of weights list object: Neighbour list object: Number of regions: 65 Number of nonzero links: 220 Percentage nonzero weights: 5.207101 Average number of links: 3.384615 Weights style: W Weights constants summary: n nn S0 S1 S2 W 65 4225 65 41.01437 265.9004 par(mfrow = c(1, 1)) plot(nb1, spa, pch = 21, bg = &quot;red&quot;) title(main = &quot;Gabriel Graph&quot;) class(nb1) [1] &quot;nb&quot; # [1] &quot;nb&quot; # This is the Gabriel graph -the graph that in this case defines which points # are connected # The matrix of spatial variables is obtained as the eigenvectors of a # neighbour matrix. This matrix is analysed by principal component analysis. nb1.neigh &lt;- nb2neig(nb1) vecspa &lt;- scores.neig(nb1.neigh) pcaspa &lt;- dudi.pca(vecspa, coacomp$lw, scan = FALSE, nf = ncol(vecspa)) summary(pcaspa) Class: pca dudi Call: dudi.pca(df = vecspa, row.w = coacomp$lw, scannf = FALSE, nf = ncol(vecspa)) Total inertia: 64 Eigenvalues: Ax1 Ax2 Ax3 Ax4 Ax5 1.222 1.174 1.168 1.161 1.149 Projected inertia (%): Ax1 Ax2 Ax3 Ax4 Ax5 1.909 1.834 1.824 1.813 1.796 Cumulative projected inertia (%): Ax1 Ax1:2 Ax1:3 Ax1:4 Ax1:5 1.909 3.743 5.567 7.381 9.176 (Only 5 dimensions (out of 64) are shown) 2.5.3.1.4.6 PCA analysis of the env matrix pcaenv &lt;- dudi.pca(env, row.w = coacomp$lw, scannf = FALSE, nf = 2) summary(pcaenv) Class: pca dudi Call: dudi.pca(df = env, row.w = coacomp$lw, scannf = FALSE, nf = 2) Total inertia: 2 Eigenvalues: Ax1 Ax2 1.96553 0.03447 Projected inertia (%): Ax1 Ax2 98.277 1.723 Cumulative projected inertia (%): Ax1 Ax1:2 98.28 100.00 2.5.3.1.4.7 The distances between species based on their biological traits, analyzed by PCoA. # Distance matrices for traits separately listdis &lt;- ldist.ktab(ktab.list.df(list(genome_funct)), c(&quot;Q&quot;), scan = FALSE) # choose 1 # Distance matrix for traits together disT &lt;- dist.ktab(ktab.list.df(list(genome_funct)), c(&quot;Q&quot;), scan = FALSE) # choose 1 pcotraits &lt;- dudi.pco(disT, coacomp$cw, full = TRUE) summary(pcotraits) Class: pco dudi Call: dudi.pco(d = disT, row.w = coacomp$cw, full = TRUE) Total inertia: 0.02997 Eigenvalues: Ax1 Ax2 Ax3 Ax4 Ax5 0.009044 0.005055 0.002984 0.002532 0.002199 Projected inertia (%): Ax1 Ax2 Ax3 Ax4 Ax5 30.172 16.863 9.955 8.447 7.336 Cumulative projected inertia (%): Ax1 Ax1:2 Ax1:3 Ax1:4 Ax1:5 30.17 47.04 56.99 65.44 72.77 (Only 5 dimensions (out of 17) are shown) 2.5.3.1.4.8 The distances between species based on their phylogenetic relatedness, analysed by PCoA. pcophy &lt;- dudi.pco(as.dist(as.matrix(phylog$Wdist)[names(comp), names(comp)]), coacomp$cw, full = TRUE) summary(pcophy) Class: pco dudi Call: dudi.pco(d = as.dist(as.matrix(phylog$Wdist)[names(comp), names(comp)]), row.w = coacomp$cw, full = TRUE) Total inertia: 0.747 Eigenvalues: Ax1 Ax2 Ax3 Ax4 Ax5 0.20794 0.15026 0.05847 0.05049 0.02600 Projected inertia (%): Ax1 Ax2 Ax3 Ax4 Ax5 27.838 20.116 7.828 6.759 3.480 Cumulative projected inertia (%): Ax1 Ax1:2 Ax1:3 Ax1:4 Ax1:5 27.84 47.95 55.78 62.54 66.02 (Only 5 dimensions (out of 107) are shown) ## 11. Tests for phylogenetic signals in traits ## ******************************************* # Function rtest.decdiv() in appendix S5, Pavoine et al., 2011. [1] # All traits together phystot &lt;- rtest.decdiv(phylog, rep(1, 108), as.dist(as.matrix(disT)[names(phylog$leaves), names(phylog$leaves)]), nrep = 99, vranking = &quot;droot&quot;, optiontest = &quot;less&quot;, ties.method = &quot;average&quot;, option = 3 ) phystot Monte-Carlo test Call: [1] &quot;rtest.decdiv&quot; Observation: 0.350656 Based on 99 replicates Simulated p-value: 0.01 Alternative hypothesis: less Std.Obs.stat3.droot Expectation Variance -7.4603354775 0.5095893695 0.0004538513 # All traits independently rtest.decdiv(phylog, rep(1, ncol(comp)), as.dist(as.matrix(listdis$D01)[ names(phylog$leaves), names(phylog$leaves) ]), nrep = 99, vranking = &quot;droot&quot;, optiontest = &quot;less&quot;, ties.method = &quot;average&quot;, option = 3 ) Monte-Carlo test Call: [1] &quot;rtest.decdiv&quot; Observation: 0.3132639 Based on 99 replicates Simulated p-value: 0.01 Alternative hypothesis: less Std.Obs.stat3.droot Expectation Variance -4.626254469 0.506764009 0.001749458 rtest.decdiv(phylog, rep(1, ncol(comp)), as.dist(as.matrix(listdis$D02)[ names(phylog$leaves), names(phylog$leaves) ]), nrep = 99, vranking = &quot;droot&quot;, optiontest = &quot;less&quot;, ties.method = &quot;average&quot;, option = 3 ) Monte-Carlo test Call: [1] &quot;rtest.decdiv&quot; Observation: 0.2521369 Based on 99 replicates Simulated p-value: 0.01 Alternative hypothesis: less Std.Obs.stat3.droot Expectation Variance -9.2612763745 0.5046198234 0.0007432286 rtest.decdiv(phylog, rep(1, ncol(comp)), as.dist(as.matrix(listdis$D03)[ names(phylog$leaves), names(phylog$leaves) ]), nrep = 99, vranking = &quot;droot&quot;, optiontest = &quot;less&quot;, ties.method = &quot;average&quot;, option = 3 ) Monte-Carlo test Call: [1] &quot;rtest.decdiv&quot; Observation: 0.3485641 Based on 99 replicates Simulated p-value: 0.01 Alternative hypothesis: less Std.Obs.stat3.droot Expectation Variance -3.700790446 0.508119719 0.001858811 rtest.decdiv(phylog, rep(1, ncol(comp)), as.dist(as.matrix(listdis$D05)[ names(phylog$leaves), names(phylog$leaves) ]), nrep = 99, vranking = &quot;droot&quot;, optiontest = &quot;less&quot;, ties.method = &quot;average&quot;, option = 3 ) Monte-Carlo test Call: [1] &quot;rtest.decdiv&quot; Observation: 0.2291326 Based on 99 replicates Simulated p-value: 0.01 Alternative hypothesis: less Std.Obs.stat3.droot Expectation Variance -3.5855599 0.5141813 0.0063201 rtest.decdiv(phylog, rep(1, ncol(comp)), as.dist(as.matrix(listdis$D06)[ names(phylog$leaves), names(phylog$leaves) ]), nrep = 99, vranking = &quot;droot&quot;, optiontest = &quot;less&quot;, ties.method = &quot;average&quot;, option = 3 ) Monte-Carlo test Call: [1] &quot;rtest.decdiv&quot; Observation: 0.2286011 Based on 99 replicates Simulated p-value: 0.01 Alternative hypothesis: less Std.Obs.stat3.droot Expectation Variance -2.72005366 0.50942711 0.01065908 rtest.decdiv(phylog, rep(1, ncol(comp)), as.dist(as.matrix(listdis$D07)[ names(phylog$leaves), names(phylog$leaves) ]), nrep = 99, vranking = &quot;droot&quot;, optiontest = &quot;less&quot;, ties.method = &quot;average&quot;, option = 3 ) Monte-Carlo test Call: [1] &quot;rtest.decdiv&quot; Observation: 0.3685821 Based on 99 replicates Simulated p-value: 0.01 Alternative hypothesis: less Std.Obs.stat3.droot Expectation Variance -3.626993832 0.507249704 0.001461693 rtest.decdiv(phylog, rep(1, ncol(comp)), as.dist(as.matrix(listdis$D08)[ names(phylog$leaves), names(phylog$leaves) ]), nrep = 99, vranking = &quot;droot&quot;, optiontest = &quot;less&quot;, ties.method = &quot;average&quot;, option = 3 ) Monte-Carlo test Call: [1] &quot;rtest.decdiv&quot; Observation: 0.3678725 Based on 99 replicates Simulated p-value: 0.02 Alternative hypothesis: less Std.Obs.stat3.droot Expectation Variance -2.557126183 0.500470260 0.002688858 rtest.decdiv(phylog, rep(1, ncol(comp)), as.dist(as.matrix(listdis$D09)[ names(phylog$leaves), names(phylog$leaves) ]), nrep = 99, vranking = &quot;droot&quot;, optiontest = &quot;less&quot;, ties.method = &quot;average&quot;, option = 3 ) Monte-Carlo test Call: [1] &quot;rtest.decdiv&quot; Observation: 0.434139 Based on 99 replicates Simulated p-value: 0.02 Alternative hypothesis: less Std.Obs.stat3.droot Expectation Variance -2.23063633 0.50931404 0.00113577 rtest.decdiv(phylog, rep(1, ncol(comp)), as.dist(as.matrix(listdis$B01)[ names(phylog$leaves), names(phylog$leaves) ]), nrep = 99, vranking = &quot;droot&quot;, optiontest = &quot;less&quot;, ties.method = &quot;average&quot;, option = 3 ) Monte-Carlo test Call: [1] &quot;rtest.decdiv&quot; Observation: 0.2990238 Based on 99 replicates Simulated p-value: 0.02 Alternative hypothesis: less Std.Obs.stat3.droot Expectation Variance -2.590529326 0.495254639 0.005737958 rtest.decdiv(phylog, rep(1, ncol(comp)), as.dist(as.matrix(listdis$B02)[ names(phylog$leaves), names(phylog$leaves) ]), nrep = 99, vranking = &quot;droot&quot;, optiontest = &quot;less&quot;, ties.method = &quot;average&quot;, option = 3 ) Monte-Carlo test Call: [1] &quot;rtest.decdiv&quot; Observation: 0.3460166 Based on 99 replicates Simulated p-value: 0.01 Alternative hypothesis: less Std.Obs.stat3.droot Expectation Variance -2.792619627 0.498080502 0.002965028 rtest.decdiv(phylog, rep(1, ncol(comp)), as.dist(as.matrix(listdis$B03)[ names(phylog$leaves), names(phylog$leaves) ]), nrep = 99, vranking = &quot;droot&quot;, optiontest = &quot;less&quot;, ties.method = &quot;average&quot;, option = 3 ) Monte-Carlo test Call: [1] &quot;rtest.decdiv&quot; Observation: 0.3318027 Based on 99 replicates Simulated p-value: 0.01 Alternative hypothesis: less Std.Obs.stat3.droot Expectation Variance -4.258545514 0.503079091 0.001617605 rtest.decdiv(phylog, rep(1, ncol(comp)), as.dist(as.matrix(listdis$B06)[ names(phylog$leaves), names(phylog$leaves) ]), nrep = 99, vranking = &quot;droot&quot;, optiontest = &quot;less&quot;, ties.method = &quot;average&quot;, option = 3 ) Monte-Carlo test Call: [1] &quot;rtest.decdiv&quot; Observation: 0.2198826 Based on 99 replicates Simulated p-value: 0.01 Alternative hypothesis: less Std.Obs.stat3.droot Expectation Variance -3.46759020 0.49450484 0.00627214 rtest.decdiv(phylog, rep(1, ncol(comp)), as.dist(as.matrix(listdis$B07)[ names(phylog$leaves), names(phylog$leaves) ]), nrep = 99, vranking = &quot;droot&quot;, optiontest = &quot;less&quot;, ties.method = &quot;average&quot;, option = 3 ) Monte-Carlo test Call: [1] &quot;rtest.decdiv&quot; Observation: 0.3116471 Based on 99 replicates Simulated p-value: 0.01 Alternative hypothesis: less Std.Obs.stat3.droot Expectation Variance -4.379553554 0.499844934 0.001846586 rtest.decdiv(phylog, rep(1, ncol(comp)), as.dist(as.matrix(listdis$B08)[ names(phylog$leaves), names(phylog$leaves) ]), nrep = 99, vranking = &quot;droot&quot;, optiontest = &quot;less&quot;, ties.method = &quot;average&quot;, option = 3 ) Monte-Carlo test Call: [1] &quot;rtest.decdiv&quot; Observation: 0.2798498 Based on 99 replicates Simulated p-value: 0.01 Alternative hypothesis: less Std.Obs.stat3.droot Expectation Variance -2.779506430 0.501038942 0.006332748 rtest.decdiv(phylog, rep(1, ncol(comp)), as.dist(as.matrix(listdis$B09)[ names(phylog$leaves), names(phylog$leaves) ]), nrep = 99, vranking = &quot;droot&quot;, optiontest = &quot;less&quot;, ties.method = &quot;average&quot;, option = 3 ) Monte-Carlo test Call: [1] &quot;rtest.decdiv&quot; Observation: 0.5328881 Based on 99 replicates Simulated p-value: 0.72 Alternative hypothesis: less Std.Obs.stat3.droot Expectation Variance 0.562984531 0.503467829 0.002730864 rtest.decdiv(phylog, rep(1, ncol(comp)), as.dist(as.matrix(listdis$B10)[ names(phylog$leaves), names(phylog$leaves) ]), nrep = 99, vranking = &quot;droot&quot;, optiontest = &quot;less&quot;, ties.method = &quot;average&quot;, option = 3 ) Monte-Carlo test Call: [1] &quot;rtest.decdiv&quot; Observation: 0.2572987 Based on 99 replicates Simulated p-value: 0.01 Alternative hypothesis: less Std.Obs.stat3.droot Expectation Variance -3.146163592 0.504411326 0.006169177 ## Update the PCOA of traits to remove traits without phylogenetic signal # Distance matrix for traits together disT &lt;- dist.ktab(ktab.list.df(list(genome_funct[, -c(4, 8, 13)])), c(&quot;Q&quot;), scan = FALSE) # choose 1 pcotraits &lt;- dudi.pco(disT, coacomp$cw, full = TRUE) summary(pcotraits) Class: pco dudi Call: dudi.pco(d = disT, row.w = coacomp$cw, full = TRUE) Total inertia: 0.03077 Eigenvalues: Ax1 Ax2 Ax3 Ax4 Ax5 0.009535 0.005727 0.003422 0.002516 0.002377 Projected inertia (%): Ax1 Ax2 Ax3 Ax4 Ax5 30.985 18.610 11.119 8.176 7.723 Cumulative projected inertia (%): Ax1 Ax1:2 Ax1:3 Ax1:4 Ax1:5 30.99 49.60 60.71 68.89 76.61 (Only 5 dimensions (out of 15) are shown) 2.5.3.1.4.9 Extended RLQ analysis rlqmix &lt;- rlqESLTP(pcaenv, pcaspa, coacomp, pcotraits, pcophy, scan = F, nf = 2) barplot(rlqmix$eig) rlqmix$eig[1] / sum(rlqmix$eig) [1] 0.7377386 # [1] 0.73 rlqmix$eig[2] / sum(rlqmix$eig) [1] 0.1168993 # [1] 0.12 1st axis plot(rlqmix, xy = spa, ax = 1, wh = &quot;S&quot;) plot(rlqmix, phy = phylog, ax = 1, wh = &quot;P&quot;) plot(rlqmix, traits = genome_funct[, -c(4, 8, 13)], ax = 1, type = &quot;Q&quot;, wh = &quot;T&quot;) plot(rlqmix, env = pcaenv$tab, ax = 1, type = &quot;Q&quot;, wh = &quot;E&quot;) s.value(metadata_co_G121eO301A[, c(&quot;Xcoord&quot;, &quot;Ycoord&quot;)], rlqmix$lR[, 1], sub = &quot;Patterns in S and E&quot;, csub = 1.5, include.origin = F, csize = 0.8 ) plot(rlqmix, env = pcaenv$tab, ax = 1, type = &quot;Q&quot;, wh = &quot;E&quot;) dotchart.phylog(phylog, rlqmix$lQ[names(phylog$leaves), 1], cleav = 0, cdot = 1, scaling = F, yjoi = 0, cex.axis = 1.5, sub = &quot;patterns in T and P&quot;, csub = 0 ) 1st axis png(&quot;figures/plot_a.png&quot;, width = 800, height = 400, res = 150) s.value( metadata_co_G121eO301A[, c(&quot;Xcoord&quot;, &quot;Ycoord&quot;)], rlqmix$lR[, 1], sub = &quot;Patterns in S and E&quot;, csub = 1.5, include.origin = FALSE, csize = 0.8 ) mtext(&quot;a&quot;, side = 3, line = 0.5, at = par(&quot;usr&quot;)[1], font = 2, cex = 1.5) dev.off() quartz_off_screen 2 png(&quot;figures/plot_b.png&quot;, width = 800, height = 400, res = 150) plot(rlqmix, env = pcaenv$tab, ax = 1, type = &quot;Q&quot;, wh = &quot;E&quot;) # mtext(&quot;b&quot;, side = 3, line = 0.5, at = par(&quot;usr&quot;)[1], font = 2, cex = 1.5) dev.off() quartz_off_screen 2 png(&quot;figures/plot_c.png&quot;, width = 800, height = 600, res = 150) dotchart.phylog( phylog, rlqmix$lQ[names(phylog$leaves), 1], cleav = 0, cdot = 1, scaling = FALSE, yjoi = 0, cex.axis = 1.5, sub = &quot;patterns in T and P&quot;, csub = 0 ) # mtext(&quot;c&quot;, side = 3, line = 0.5, at = par(&quot;usr&quot;)[1], font = 2, cex = 1.5) dev.off() quartz_off_screen 2 img_a &lt;- image_read(&quot;figures/plot_a.png&quot;) img_b &lt;- image_read(&quot;figures/plot_b.png&quot;) img_c &lt;- image_read(&quot;figures/plot_c.png&quot;) combined &lt;- image_append(c(img_b, img_c), stack = TRUE) image_write(combined, &quot;figures/combined_plots.png&quot;) 2nd axis plot(rlqmix, xy = spa, ax = 2, wh = &quot;S&quot;) plot(rlqmix, phy = phylog, ax = 2, wh = &quot;P&quot;) plot(rlqmix, traits = genome_funct, ax = 2, type = &quot;Q&quot;, wh = &quot;T&quot;) plot(rlqmix, env = pcaenv$tab, ax = 2, type = &quot;Q&quot;, wh = &quot;E&quot;) 2.5.3.2 Subspecies Segregation and Spatial Structuring 2.5.3.2.1 Visual Distribution Lawsonibacter subspecies macroquant_lawsonibacter &lt;- macroquant_counts_filt_30_98 %&gt;% filter(genome %in% c(macromag_genomemetadata_98 %&gt;% filter(genus == &quot;Lawsonibacter&quot;) %&gt;% pull(genome))) %&gt;% pivot_longer(-genome, names_to = &quot;microsample&quot;, values_to = &quot;abundance&quot;) %&gt;% left_join(macroquant_metrics_filt_30 %&gt;% select(microsample, batch, cryosection, animal, Xcoord, Ycoord), by = &quot;microsample&quot;) %&gt;% filter( abundance &gt; 0, !is.na(Xcoord), !is.na(Ycoord) ) %&gt;% left_join(macromag_genomemetadata_98, by = &quot;genome&quot;) macroquant_lawsonibacter %&gt;% distinct(genome, .keep_all = TRUE) %&gt;% select(genome, species, completeness, contamination) %&gt;% arrange(species, completeness) %&gt;% write.table(&quot;lawsonibacter_mags.txt&quot;) macroquant_lawsonibacter_bar &lt;- macroquant_lawsonibacter %&gt;% arrange(microsample) %&gt;% mutate(mag_species = paste0(genome, &quot;_&quot;, species, &quot;_&quot;, circul)) %&gt;% ggplot(aes(x = abundance, y = microsample, fill = mag_species) ) + geom_bar(position = &quot;fill&quot;, stat = &quot;identity&quot;, width = 0.8) + facet_wrap(~animal, scales = &quot;free_y&quot;, ncol = 1) + scale_fill_viridis_d(option = &quot;turbo&quot;, name = &quot;MAG (98% ANI)&quot;) + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) ggsave(filename = &quot;figures/macroquant_lawsonibacter_bar.png&quot;, macroquant_lawsonibacter_bar, width = 10, height = 7) macroquant_lawsonibacter_bar # Order and group data for cumulative pie angles lawsonibacter_pie_df &lt;- macroquant_lawsonibacter %&gt;% filter( cryosection %in% c(&quot;G121eI103A&quot;, &quot;G103bI301A&quot;), !microsample %in% c(&quot;M300840&quot;, &quot;M301068&quot;, &quot;M301085&quot;, &quot;M301084&quot;)#, # wrong coordinates #circul %in% c(&quot;Y&quot;) ) %&gt;% group_by(microsample) %&gt;% mutate( abundance = abundance / sum(abundance) # normalize counts to proportions ) %&gt;% arrange(microsample, genome) %&gt;% mutate( start = cumsum(lag(abundance, default = 0)) * 2 * pi, end = cumsum(abundance) * 2 * pi, r0 = 0, r = 75 ) lawsonibacter_piecharts &lt;- split(lawsonibacter_pie_df, lawsonibacter_pie_df$cryosection) %&gt;% map(~ { ggplot(.x) + geom_arc_bar( aes( x0 = Xcoord, y0 = Ycoord, r0 = r0, r = r, start = start, end = end, fill = genome ), color = &quot;black&quot;, linewidth = 0.1 ) + coord_fixed() + ggtitle(unique(.x$cryosection)) + theme(legend.position = &quot;none&quot;) + custom_ggplot_theme + scale_fill_manual(values = lawsonibacter_colors, drop = FALSE) }) fig6_a &lt;- cowplot::plot_grid(plotlist = lawsonibacter_piecharts, ncol = 2) fig6_a ggsave(filename = &quot;figures/Fig6_a.pdf&quot;, fig6_a , width = 10, height = 5) ggsave(filename = &quot;figures/Fig6_a.png&quot;, fig6_a , width = 10, height = 5) ggsave(filename = &quot;figures/Fig6_a_legend.png&quot;, lawsonibacter_piecharts$G121eI103A + theme(legend.position = &quot;right&quot;), width = 10, height = 5) 2.5.3.2.2 Test Spatial Distribution Lawsonibacter subspecies Note: The lawsonibacter_mantel_analysis() function needs to be loaded. ###### 35 Days Animal (G121e) lawsonibacter_G121e &lt;- lawsonibacter_mantel_analysis( data = macroquant_lawsonibacter, animal_id = &quot;G121e&quot;, circul_selection = &quot;N&quot; ) circul_selection is not &#39;Y&#39;; skipping circul filter. Warning in cmultRepl(lawsonibacter_clr, method = &quot;GBM&quot;, output = &quot;prop&quot;, : Column no. 2 containing &gt;95% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 6 containing &gt;95% zeros/unobserved values deleted (see arguments z.warning and z.delete). Column no. 8 containing &gt;95% zeros/unobserved values deleted (see arguments z.warning and z.delete). lawsonibacter_G121e $animal [1] &quot;G121e&quot; $mantel_pa Mantel statistic based on Pearson&#39;s product-moment correlation Call: vegan::mantel(xdis = comm_dist_pa, ydis = spatial_dist_pa, permutations = 999) Mantel statistic r: -0.03515 Significance: 0.647 Upper quantiles of permutations (null model): 90% 95% 97.5% 99% 0.102 0.140 0.169 0.197 Permutation: free Number of permutations: 999 $correlogram_pa Mantel Correlogram Analysis Call: vegan::mantel.correlog(D.eco = comm_dist_pa, D.geo = spatial_dist_pa, nperm = 999) class.index n.dist Mantel.cor Pr(Mantel) Pr(corrected) D.cl.1 181.584122 50.000000 -0.026166 0.348 0.348 D.cl.2 544.752367 84.000000 -0.021366 0.292 0.584 D.cl.3 907.920611 72.000000 -0.030531 0.326 0.876 D.cl.4 1271.088856 118.000000 -0.028028 0.260 1.000 D.cl.5 1634.257101 168.000000 0.066767 0.117 0.585 D.cl.6 1997.425345 144.000000 -0.050925 0.130 0.702 D.cl.7 2360.593590 96.000000 NA NA NA D.cl.8 2723.761834 68.000000 NA NA NA D.cl.9 3086.930079 52.000000 NA NA NA D.cl.10 3450.098324 18.000000 NA NA NA $mantel_clr Mantel statistic based on Pearson&#39;s product-moment correlation Call: vegan::mantel(xdis = comm_dist_clr, ydis = spatial_dist_clr, permutations = 999) Mantel statistic r: 0.0642 Significance: 0.178 Upper quantiles of permutations (null model): 90% 95% 97.5% 99% 0.0935 0.1271 0.1505 0.2073 Permutation: free Number of permutations: 999 $correlogram_clr Mantel Correlogram Analysis Call: vegan::mantel.correlog(D.eco = comm_dist_clr, D.geo = spatial_dist_clr, nperm = 999) class.index n.dist Mantel.cor Pr(Mantel) Pr(corrected) D.cl.1 181.584122 50.000000 -0.081826 0.085 0.085 . D.cl.2 544.752367 84.000000 0.042880 0.170 0.170 D.cl.3 907.920611 72.000000 0.054770 0.221 0.340 D.cl.4 1271.088856 118.000000 0.052380 0.140 0.420 D.cl.5 1634.257101 168.000000 0.015687 0.389 0.560 D.cl.6 1997.425345 144.000000 -0.031579 0.225 0.700 D.cl.7 2360.593590 96.000000 NA NA NA D.cl.8 2723.761834 68.000000 NA NA NA D.cl.9 3086.930079 52.000000 NA NA NA D.cl.10 3450.098324 18.000000 NA NA NA --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 $clr_lm Anova Table Resampling test using freedman_lane to handle nuisance variables and 5000 permutations. SS df F parametric P(&gt;F) resampled P(&gt;F) spat_dist 0.9336 1 1.792 0.1814 0.193 Residuals 225.5667 433 2.5.3.2.2.1 14 Days Animal (G103b) lawsonibacter_G103b &lt;- lawsonibacter_mantel_analysis( data = macroquant_lawsonibacter, animal_id = &quot;G103b&quot;, circul_selection = &quot;N&quot; ) circul_selection is not &#39;Y&#39;; skipping circul filter. lawsonibacter_G103b $animal [1] &quot;G103b&quot; $mantel_pa Mantel statistic based on Pearson&#39;s product-moment correlation Call: vegan::mantel(xdis = comm_dist_pa, ydis = spatial_dist_pa, permutations = 999) Mantel statistic r: -0.03831 Significance: 0.748 Upper quantiles of permutations (null model): 90% 95% 97.5% 99% 0.0796 0.1152 0.1440 0.1803 Permutation: free Number of permutations: 999 $correlogram_pa Mantel Correlogram Analysis Call: vegan::mantel.correlog(D.eco = comm_dist_pa, D.geo = spatial_dist_pa, nperm = 999) class.index n.dist Mantel.cor Pr(Mantel) Pr(corrected) D.cl.1 3.1709e+02 6.2000e+01 8.3494e-03 0.406 0.406 D.cl.2 7.2451e+02 8.0000e+01 -5.2672e-02 0.161 0.322 D.cl.3 1.1319e+03 1.3800e+02 -1.5150e-02 0.403 0.806 D.cl.4 1.5394e+03 1.1800e+02 -1.1354e-02 0.420 1.000 D.cl.5 1.9468e+03 1.0200e+02 1.4488e-02 0.378 1.000 D.cl.6 2.3542e+03 9.0000e+01 NA NA NA D.cl.7 2.7616e+03 9.4000e+01 NA NA NA D.cl.8 3.1690e+03 6.4000e+01 NA NA NA D.cl.9 3.5765e+03 2.6000e+01 NA NA NA D.cl.10 3.9839e+03 3.6000e+01 NA NA NA $mantel_clr Mantel statistic based on Pearson&#39;s product-moment correlation Call: vegan::mantel(xdis = comm_dist_clr, ydis = spatial_dist_clr, permutations = 999) Mantel statistic r: 0.05375 Significance: 0.163 Upper quantiles of permutations (null model): 90% 95% 97.5% 99% 0.072 0.103 0.132 0.163 Permutation: free Number of permutations: 999 $correlogram_clr Mantel Correlogram Analysis Call: vegan::mantel.correlog(D.eco = comm_dist_clr, D.geo = spatial_dist_clr, nperm = 999) class.index n.dist Mantel.cor Pr(Mantel) Pr(corrected) D.cl.1 3.1709e+02 6.2000e+01 6.6671e-02 0.093 0.093 . D.cl.2 7.2451e+02 8.0000e+01 1.9451e-03 0.493 0.493 D.cl.3 1.1319e+03 1.3800e+02 -2.9452e-02 0.275 0.550 D.cl.4 1.5394e+03 1.1800e+02 -2.0631e-02 0.352 0.825 D.cl.5 1.9468e+03 1.0200e+02 6.8981e-02 0.086 0.430 D.cl.6 2.3542e+03 9.0000e+01 NA NA NA D.cl.7 2.7616e+03 9.4000e+01 NA NA NA D.cl.8 3.1690e+03 6.4000e+01 NA NA NA D.cl.9 3.5765e+03 2.6000e+01 NA NA NA D.cl.10 3.9839e+03 3.6000e+01 NA NA NA --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 $clr_lm Anova Table Resampling test using freedman_lane to handle nuisance variables and 5000 permutations. SS df F parametric P(&gt;F) resampled P(&gt;F) spat_dist 0.3424 1 1.171 0.2799 0.2862 Residuals 118.1788 404 2.5.3.3 SNP level microdiversity (Lorikeet) 2.5.3.3.1 Visual PopANI for GPB_bin_000044 lawsonibacter_popANI &lt;- map_dfr(names(ani_list), function(bin_id) { ani_mat &lt;- ani_list[[bin_id]] ani_mat %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;microsample_1&quot;) %&gt;% pivot_longer(-microsample_1, names_to = &quot;microsample_2&quot;, values_to = &quot;popANI&quot;) %&gt;% filter(microsample_1 != microsample_2) %&gt;% # Exclude self-comparisons mutate( bin = bin_id, # Create unordered pair identifier sample_pair = pmap_chr(list(microsample_1, microsample_2), ~ paste(sort(c(..1, ..2)), collapse = &quot;_&quot;)) ) %&gt;% distinct(bin, sample_pair, .keep_all = TRUE) %&gt;% # Keep only one of each unordered pair select(-sample_pair) }) lawsonibacter_popANI_meta &lt;- macroquant_metrics_filt_30 %&gt;% filter( cryosection %in% c(&quot;G121eI103A&quot;, &quot;G103bI301A&quot;), type_binomial %in% c(&quot;positive&quot;), cov_filtering %in% c(&quot;Retained By Filtering&quot;), !is.na(Xcoord), !is.na(Ycoord), !microsample %in% c(&quot;M300840&quot;, &quot;M301068&quot;, &quot;M301085&quot;, &quot;M301084&quot;, &quot;M301055&quot;, # exclude based on spatial coordinate OUT &quot;M300833&quot;, &quot;M300886&quot;) # exclude based on spatial coordinate SAME ) %&gt;% select(microsample, animal, Xcoord, Ycoord) lawsonibacter_popANI_df &lt;- lawsonibacter_popANI %&gt;% filter(!is.nan(popANI), !is.na(popANI), microsample_1 %in% c(lawsonibacter_popANI_meta$microsample), microsample_2 %in% c(lawsonibacter_popANI_meta$microsample), bin %in%c(&quot;GPB_bin_000044&quot;) ) %&gt;% left_join(macroquant_metrics_filt_30 %&gt;% select(microsample, animal), by = c(&quot;microsample_1&quot; = &quot;microsample&quot;)) %&gt;% rename(animal_microsample_1=animal) %&gt;% left_join(macroquant_metrics_filt_30 %&gt;% select(microsample, animal), by = c(&quot;microsample_2&quot; = &quot;microsample&quot;)) %&gt;% rename(animal_microsample_2=animal) 2.5.3.3.1.1 Distribution popANI by Group (Fig6_c) fig6_c &lt;- lawsonibacter_popANI_df %&gt;% mutate(group=ifelse(animal_microsample_1==animal_microsample_2, animal_microsample_1, &quot;G121e-G103b&quot;)) %&gt;% ggplot(aes(x = group, y = popANI, fill = group)) + geom_boxplot(aes(group = group), outlier.shape = NA) + geom_jitter( position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8), size = 0.3, alpha = 0.3 ) + scale_fill_manual(values = c(&quot;#79b1a3&quot;, &quot;#e35d51&quot;, &quot;#ffcc62&quot;)) + custom_ggplot_theme + stat_compare_means(method = &quot;wilcox.test&quot;, comparisons = list(c(&quot;G121e&quot;, &quot;G103b&quot;), c(&quot;G121e&quot;, &quot;G121e-G103b&quot;), c(&quot;G103b&quot;, &quot;G121e-G103b&quot;)), label = &quot;p.signif&quot;, p.adjust.method = &quot;BH&quot;, hide.ns = TRUE) + labs( # title = &quot;a&quot;, x = &quot;&quot;, y = &quot;popANI GPB_bin_000044&quot; ) + theme(legend.position = &quot;none&quot;) + scale_x_discrete(labels = c(&quot;G103b&quot; = &quot;Within Animal \\nG103b&quot;, &quot;G121e&quot; = &quot;Within Animal \\nG121e&quot;, &quot;G121e-G103b&quot; =&quot;Between Animals&quot;)) + # Hide last tick label by replacing it with blank scale_y_continuous(labels = function(x) { lbls &lt;- as.character(x) lbls[length(lbls)] &lt;- &quot;&quot; # blank out last label lbls }) #facet_wrap(~bin) fig6_c ggsave(filename = &quot;figures/Fig6_c.pdf&quot;, fig6_c, width = 10, height = 5) ggsave(filename = &quot;figures/Fig6_c.png&quot;, fig6_c, width = 10, height = 5) 2.5.3.3.1.2 Heatmap popANI (Fig6_b) # Remove pairs with NA for visualisation popani_044 &lt;- ani_list$GPB_bin_000044[rownames(ani_list$GPB_bin_000044) %in% lawsonibacter_popANI_meta$microsample, ] %&gt;% select(lawsonibacter_popANI_meta$microsample) sum(is.na(popani_044)) # Count of NA [1] 0 metadata_044 &lt;- macroquant_metrics_filt_30 %&gt;% filter(microsample %in% colnames(popani_044)) %&gt;% select(microsample, animal, cryosection) %&gt;% column_to_rownames(var = &quot;microsample&quot;) %&gt;% rename(Cryosection = cryosection, Animal = animal) annotation_colors &lt;- list( Animal = c(&quot;G121e&quot; = &quot;#e35d51&quot;, &quot;G103b&quot; = &quot;#79b1a3&quot;), # light blue Cryosection = c(&quot;G121eI103A&quot; = &quot;darkgrey&quot;, &quot;G103bI301A&quot; = &quot;#ffcc62&quot;) # soft orange ) fig6_b &lt;- pheatmap( popani_044 , cluster_rows = TRUE, cluster_cols = TRUE, clustering_method = &quot;ward&quot;, display_numbers = FALSE, legend = TRUE, show_rownames = TRUE, show_colnames = TRUE, color = colorRampPalette(c(&quot;black&quot;, &quot;#fbffe0&quot;))(100), annotation_col = metadata_044, annotation_row = metadata_044, annotation_colors = annotation_colors, main = &quot;Clustered ANI Heatmap&quot; ) The &quot;ward&quot; method has been renamed to &quot;ward.D&quot;; note new &quot;ward.D2&quot; The &quot;ward&quot; method has been renamed to &quot;ward.D&quot;; note new &quot;ward.D2&quot; fig6_b ggsave(filename = &quot;figures/Fig6_b.pdf&quot;, fig6_b, width = 10, height = 5) ggsave(filename = &quot;figures/Fig6_b.png&quot;, fig6_b, width = 10, height = 5) 2.5.3.3.2 Test Distance-decay Relationship Microdiversity 2.5.3.3.2.1 Strategy 1 set.seed(1234) ids_35day &lt;- lawsonibacter_popANI_meta %&gt;% filter(animal %in% c(&quot;G121e&quot;)) %&gt;% pull(microsample) popani_044_35day &lt;- ani_list$GPB_bin_000044[rownames(ani_list$GPB_bin_000044) %in% ids_35day, ] %&gt;% select(ids_35day) diag(popani_044_35day) &lt;- NA popani_distance_lmp &lt;- (1 - popani_044_35day) %&gt;% as.dist() # Strategy 1 distance spatial_distance_lmp &lt;- dist(macroquant_metrics_filt_30 %&gt;% filter(microsample %in% colnames(popani_044_35day)) %&gt;% select(microsample, Xcoord, Ycoord) %&gt;% column_to_rownames(var = &quot;microsample&quot;)) toplot &lt;- data.frame(spat_dist=as.numeric(spatial_distance_lmp), comm_dist=as.numeric(popani_distance_lmp)) ggplot(toplot,aes(x=spat_dist,y=comm_dist))+ geom_smooth() `geom_smooth()` using method = &#39;loess&#39; and formula = &#39;y ~ x&#39; aovperm(lmperm(comm_dist~spat_dist,data=toplot),np=10000) Anova Table Resampling test using freedman_lane to handle nuisance variables and 10000 permutations. SS df F parametric P(&gt;F) resampled P(&gt;F) spat_dist 2.218e-07 1 7.285 0.007191 0.0066 Residuals 1.504e-05 494 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
